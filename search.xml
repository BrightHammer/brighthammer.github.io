<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows Terminal 美化，打造个性化终端</title>
    <url>/Terminal/Windows-Terminal-%E7%BE%8E%E5%8C%96%EF%BC%8C%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[<blockquote>
<p>记录Windows Terminal 改造过程，基于oh-my-posh主题<br><span id="more"></span></p>
</blockquote>
<h1 id="Windows-Terminal-美化，打造个性化终端"><a href="#Windows-Terminal-美化，打造个性化终端" class="headerlink" title="Windows Terminal 美化，打造个性化终端"></a>Windows Terminal 美化，打造个性化终端</h1><p>一个称手好用还好看的终端是保证工作效率的关键！</p>
<p>以前用Cmder，界面简约功能也不少，但后来遇到一些bug，多次尝试解决无果，最终只得另外寻找新的工具。</p>
<p>逛一圈下来最终又回到了Windows Terminal。</p>
<p>不过，原版用着显然是不爽的，又丑信息显示又少，于是加点主题改造一番，下面进入正题。</p>
<h2 id="1-安装Windows-Terminal和Oh-my-Posh"><a href="#1-安装Windows-Terminal和Oh-my-Posh" class="headerlink" title="1. 安装Windows Terminal和Oh-my-Posh"></a>1. 安装Windows Terminal和Oh-my-Posh</h2><h3 id="1-1-安装Windows-Terminal"><a href="#1-1-安装Windows-Terminal" class="headerlink" title="1.1 安装Windows Terminal"></a>1.1 安装Windows Terminal</h3><ul>
<li>直接去应用商店搜索“Windows Terminal“安装即可</li>
</ul>
<h3 id="1-2-安装Oh-my-Posh和posh-git"><a href="#1-2-安装Oh-my-Posh和posh-git" class="headerlink" title="1.2 安装Oh-my-Posh和posh-git"></a>1.2 安装Oh-my-Posh和posh-git</h3><ul>
<li><strong>最新安装方式请参考官方文档</strong>：<a href="https://ohmyposh.dev/docs/installation/windows">Oh my Posh 官方文档</a></li>
<li>以管理员方式打开Windows Terminal，依次运行以下命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绕过power shell执行策略，使其可以执行脚本文件</span></span><br><span class="line">Set-ExecutionPolicy Bypass</span><br><span class="line"><span class="comment"># 安装oh-my-posh，仅为当前用户</span></span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line"><span class="comment"># 安装posh-git，用于显示git信息，仅为当前用户</span></span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中途若有询问，选择Y</span></span><br></pre></td></tr></table></figure>
<h2 id="2-选择并配置默认主题"><a href="#2-选择并配置默认主题" class="headerlink" title="2. 选择并配置默认主题"></a>2. 选择并配置默认主题</h2><h3 id="2-1-安装和使用字体"><a href="#2-1-安装和使用字体" class="headerlink" title="2.1 安装和使用字体"></a>2.1 安装和使用字体</h3><ul>
<li><p>安装字体</p>
<blockquote>
<p>Oh-my-Posh使用了很多个性化的图标，需要合适的字体才能比较好地适配</p>
<p><strong>字体下载地址：<a href="https://www.nerdfonts.com/">Nerd Fonts</a></strong></p>
<p>官方推荐 <strong>Meslo LGM NF</strong>，本文使用<strong>Cousine Nerd Font</strong>，可根据需要进行选择并安装</p>
</blockquote>
</li>
<li><p>使用字体</p>
</li>
</ul>
<blockquote>
<p>在Windows Terminal中，上方标签页找到设置</p>
<p>设置页中左边配置文件栏选择Windows PowerShell，右边设置中进入外观选项</p>
<p>选项中选择字体，然后保存即可，未生效则重启Windows Terminal</p>
</blockquote>
<h3 id="2-2-查看和设置主题"><a href="#2-2-查看和设置主题" class="headerlink" title="2.2 查看和设置主题"></a>2.2 查看和设置主题</h3><ul>
<li><strong>官网主题预览</strong>：<a href="https://ohmyposh.dev/docs/themes">Themes</a></li>
<li>预览所有主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure>
<ul>
<li>设置主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-PoshPrompt -Theme agnoster</span><br></pre></td></tr></table></figure>
<h3 id="2-3-设置默认主题"><a href="#2-3-设置默认主题" class="headerlink" title="2.3 设置默认主题"></a>2.3 设置默认主题</h3><ul>
<li><strong>参考官方文档</strong>：<a href="https://ohmyposh.dev/docs/installation/prompt">修改主题</a></li>
</ul>
<ul>
<li>创建脚本配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动编辑power shell配置文件的引擎</span></span><br><span class="line"><span class="keyword">if</span> (!(Test-Path -Path <span class="variable">$PROFILE</span> )) &#123; New-Item -Type File -Path <span class="variable">$PROFILE</span> -Force &#125;</span><br><span class="line"><span class="comment"># 用记事本打开配置文件</span></span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在脚本配置文件中填入以下内容，即可设置默认主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-PoshPrompt -Theme agnoster</span><br></pre></td></tr></table></figure>
<h2 id="3-配置第三方信息显示"><a href="#3-配置第三方信息显示" class="headerlink" title="3. 配置第三方信息显示"></a>3. 配置第三方信息显示</h2><h3 id="3-1-显示python虚拟环境"><a href="#3-1-显示python虚拟环境" class="headerlink" title="3.1 显示python虚拟环境"></a>3.1 显示python虚拟环境</h3><ul>
<li><strong>官方文档</strong>：<a href="https://ohmyposh.dev/docs/segments/python">Python</a></li>
<li><strong>初级：随时显示conda环境</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在powershell中运行下述命令，然后再选一个配置有虚拟环境显示的主题即可</span></span><br><span class="line">conda init powershell</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>进阶：仅需要时加载conda，提高终端启动速度</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.初级方案启动新terminal时都会加载conda，速度极慢，因此仅在需要时加载conda，方案如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.修改conda脚本文件名：将初级中生成的profile.ps1（与$PROFILE位于同一目录）文件名修改为任意名字如condaInit.ps1</span></span><br><span class="line"><span class="comment"># 2.修改$PROFILE，为conda初始化脚本调用设置别名：</span></span><br><span class="line">notepad <span class="variable">$PROFILE</span> <span class="comment"># 打开文件</span></span><br><span class="line">Set-Alias condaInit <span class="string">&quot;C:\Users\XXX\Documents\Powershell\condaInit.ps1&quot;</span> <span class="comment"># 添加这一行，路径改为自己的路径，“condaInit”即为初始化conda的别名</span></span><br><span class="line"><span class="comment"># 3. 修改conda脚本，在最后添加设置主题的操作：</span></span><br><span class="line">oh-my-posh init pwsh --config THEME | Invoke-Expression <span class="comment"># 添加到最后，这行与$PROFILE设置默认主题的命令一致，作用是修复加载conda引起的格式错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成设置后，开启速度&lt;1s,在终端内运行`condaInit`即可加载conda环境</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>下面是我的两个配置文件示例</p>
<ul>
<li>condaInit.ps1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#region conda initialize</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">(&amp; <span class="string">&quot;C:\Users\BrightHammer\miniconda3\Scripts\conda.exe&quot;</span> <span class="string">&quot;shell.powershell&quot;</span> <span class="string">&quot;hook&quot;</span>) | Out-String | Invoke-Expression</span><br><span class="line"><span class="comment">#endregion</span></span><br><span class="line"></span><br><span class="line">oh-my-posh init pwsh --config <span class="variable">$default_theme</span> | Invoke-Expression</span><br></pre></td></tr></table></figure>
<ul>
<li>Microsoft.PowerShell_profile.ps1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$default_theme</span>=<span class="string">&quot;~\.omp-theme\.mytheme.json&quot;</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="variable">$default_theme</span> | Invoke-Expression</span><br><span class="line">Set-Alias condaInit <span class="string">&quot;C:\Users\BrightHammer\Documents\Powershell\condaInit.ps1&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-配置自定义主题"><a href="#4-配置自定义主题" class="headerlink" title="4. 配置自定义主题"></a>4. 配置自定义主题</h2><ul>
<li>现有主题无法完美满足自己需求，就需要修改主题配置文件来自定义了，官网已经给出了详细的主题配置规则</li>
<li><strong>主题配置规则</strong>：<a href="https://ohmyposh.dev/docs/configuration/overview">Configuration</a></li>
</ul>
<h3 id="4-1-导出主题配置文件"><a href="#4-1-导出主题配置文件" class="headerlink" title="4.1 导出主题配置文件"></a>4.1 导出主题配置文件</h3><ul>
<li>建议基于原有主题文件进行修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出当前主题以便修改</span></span><br><span class="line">Export-PoshTheme -FilePath ~/.oh-my-posh.omp.json</span><br><span class="line"><span class="comment"># 设置自定义的主题</span></span><br><span class="line">Set-PoshPrompt -Theme  ~/.oh-my-posh.omp.json</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以去官网下载对应的主题文件: <a href="https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes">主题配置文件下载</a></p>
</blockquote>
<h3 id="4-2-定制主题"><a href="#4-2-定制主题" class="headerlink" title="4.2 定制主题"></a>4.2 定制主题</h3><ul>
<li>接着修改主题配置文件，有想加的功能可以到其他有该功能的主题中找如何实现，终极缝合怪</li>
<li>效果图</li>
</ul>
<p><img src="/images/Windows Terminal demo.jpg" alt=""></p>
<ul>
<li>完整配置文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;blocks&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;segments&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#1d1d1d&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#26C6DA&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;alpine&quot;</span>: <span class="string">&quot;\uf300&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;arch&quot;</span>: <span class="string">&quot;\uf303&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;centos&quot;</span>: <span class="string">&quot;\uf304&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;debian&quot;</span>: <span class="string">&quot;\uf306&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;elementary&quot;</span>: <span class="string">&quot;\uf309&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fedora&quot;</span>: <span class="string">&quot;\uf30a&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;gentoo&quot;</span>: <span class="string">&quot;\uf30d&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linux&quot;</span>: <span class="string">&quot;\ue712&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;macos&quot;</span>: <span class="string">&quot;\ue711&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;manjaro&quot;</span>: <span class="string">&quot;\uf312&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mint&quot;</span>: <span class="string">&quot;\uf30f&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;opensuse&quot;</span>: <span class="string">&quot;\uf314&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;raspbian&quot;</span>: <span class="string">&quot;\uf315&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot;&#123;&#123; if .WSL &#125;&#125;\ue712 on &#123;&#123; end &#125;&#125;&#123;&#123; .Icon &#125;&#125;&lt;#7a7a7a&gt; &lt;/&gt;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ubuntu&quot;</span>: <span class="string">&quot;\uf31c&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;windows&quot;</span>: <span class="string">&quot;\ue70f&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;diamond&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;os&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#1d1d1d&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#81A1C1&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;full&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot;&#123;&#123; .Path &#125;&#125; &quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;path&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#1d1d1d&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#C591E8&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;leading_diamond&quot;</span>: <span class="string">&quot; \ue0b6&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;fetch_version&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot;\ue235 &#123;&#123; if .Error &#125;&#125;&#123;&#123; .Error &#125;&#125;&#123;&#123; else &#125;&#125;&#123;&#123; if .Venv &#125;&#125;&#123;&#123; .Venv &#125;&#125; &#123;&#123; end &#125;&#125;&#123;&#123; .Full &#125;&#125;&#123;&#123; end &#125;&#125;&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;prompt&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;segments&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#1d1d1d&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#9b9b9b&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;branch_ahead_icon&quot;</span>: <span class="string">&quot;&lt;#88C0D0&gt;\u21e1 &lt;/&gt;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;branch_behind_icon&quot;</span>: <span class="string">&quot;&lt;#88C0D0&gt;\u21e3 &lt;/&gt;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fetch_stash_count&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;fetch_status&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;fetch_upstream_icon&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;github_icon&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot; &#123;&#123; .UpstreamIcon &#125;&#125;&#123;&#123; .HEAD &#125;&#125;&#123;&#123; .BranchStatus &#125;&#125;&#123;&#123; if .Working.Changed &#125;&#125; \uf044 &#123;&#123; .Working.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if and (.Working.Changed) (.Staging.Changed) &#125;&#125; |&#123;&#123; end &#125;&#125;&#123;&#123; if .Staging.Changed &#125;&#125; \uf046 &#123;&#123; .Staging.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .StashCount 0 &#125;&#125; \uf692 &#123;&#123; .StashCount &#125;&#125;&#123;&#123; end &#125;&#125; &quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;prompt&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;segments&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#A3BE8C&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;austin&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot; &#123;&#123; .FormattedMs &#125;&#125; &quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;executiontime&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;prompt&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;prompt&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;segments&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;time&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;time_format&quot;</span>: <span class="string">&quot;[15:04:05]&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;alignment&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;newline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;segments&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#01a15e&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;foreground_templates&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&#123;&#123; if gt .Code 0 &#125;&#125;#BF616A&#123;&#123; end &#125;&#125;&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;always_enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;template&quot;</span>: <span class="string">&quot;\u276f &quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;plain&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;exit&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;prompt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;console_title&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;console_title_style&quot;</span>: <span class="string">&quot;template&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;console_title_template&quot;</span>: <span class="string">&quot;&#123;&#123;if .Root&#125;&#125;(Admin)&#123;&#123;end&#125;&#125; &#123;&#123;.PWD&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://qianxu.run/2021/08/17/beautify-terminal/">美化终端</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/354603010">Windows Terminal美化（oh-my-posh3）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt+VS中文乱码问题尽可能完全指南</title>
    <url>/Coding/Qt+VS%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>忍受Qt的中文乱码问题很久了，整理了一下避免乱码的方法<br><span id="more"></span></p>
</blockquote>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><div class="note warning">
            <p>建议慎用直接修改编码格式。</p>
          </div>
<ul>
<li>很多教程里一上来可能就说设置为”utf-8”就会好，但是也会有很多副作用，比如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> execution_character_set(<span class="meta-string">&quot;utf-8&quot;</span>) <span class="comment">// 指定字符集，设置前后貌似没发现变化</span></span></span><br><span class="line"></span><br><span class="line">QTextCodec::<span class="built_in">setCodecForLocale</span>(QTextCodec::<span class="built_in">codecForName</span>(<span class="string">&quot;utf-8&quot;</span>)); <span class="comment">// 这一行也许能暂时解决某个问题，但是会带来更多bug</span></span><br></pre></td></tr></table></figure>
<h1 id="经测试正常的使用方法："><a href="#经测试正常的使用方法：" class="headerlink" title="经测试正常的使用方法："></a>经测试正常的使用方法：</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 字符串 -&gt; QString</span></span><br><span class="line"><span class="comment">// qDebug以及其他Qt内置函数会强制转换为QString，不做处理则会乱码，建议用fromLocal8Bit提前转换防止中文乱码</span></span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;中文输出内容&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// QString -&gt; char*</span></span><br><span class="line"><span class="keyword">char</span>* cstr = qstr.<span class="built_in">toLocal8Bit</span>().<span class="built_in">data</span>(); <span class="comment">// 通过toLocal8Bit进行转换，表示按照Unicode编码进行转换</span></span><br><span class="line"><span class="comment">// 也可以分两步写</span></span><br><span class="line">QByteArray temp = qstr.<span class="built_in">toLocal8Bit</span>();</span><br><span class="line"><span class="keyword">char</span> *cstr = temp.<span class="built_in">data</span>(); <span class="comment">// 有说法是写一行乱码，分开写不乱码，我测试均正常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// QString -&gt; std::string</span></span><br><span class="line">std::string str = std::<span class="built_in">string</span>(qstr.<span class="built_in">toLocal8Bit</span>().<span class="built_in">data</span>()); <span class="comment">// 先用toLocal8Bit转为不乱码的char*，再转为std::string</span></span><br><span class="line"><span class="comment">// std::string str = qstr.toStdString(); // 不建议用，这种情况下中文会乱码</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++ coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>Qt</tag>
        <tag>字符编码</tag>
        <tag>QString</tag>
        <tag>string</tag>
        <tag>char *</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用rsync同步文件到Windows</title>
    <url>/Ubuntu/Ubuntu%E4%BD%BF%E7%94%A8rsync%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%88%B0Windows/</url>
    <content><![CDATA[<blockquote>
<p>通过Rsync主动同步Ubuntu文件到Windows<br><span id="more"></span></p>
</blockquote>
<h2 id="Ubuntu服务端配置方法"><a href="#Ubuntu服务端配置方法" class="headerlink" title="Ubuntu服务端配置方法"></a>Ubuntu服务端配置方法</h2><ul>
<li>Ubuntu一般都自带rsync，没有的话可以用apt安装一下</li>
<li>接着新建一个文件夹，用来放配置文件等，为了省得总是sudo，可以直接放在home/usr下面</li>
<li>新建rsyncd.conf 配置文件, 内容如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### rsyncd.conf 文件的配置</span></span><br><span class="line"><span class="comment"># /etc/rsyncd: configuration file for rsync daemon mode</span></span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"><span class="comment"># 传输文件使用的用户和用户组，如果是从服务器=&gt;客户端，要保证www用户对文件有读取的权限；如果是从客户端=&gt;服务端，要保证www对文件有写权限。</span></span><br><span class="line">uid = www</span><br><span class="line">gid = www</span><br><span class="line"><span class="comment"># 允许chroot，提升安全性，客户端连接模块，首先chroot到模块path参数指定的目录下，chroot为yes时必须使用root权限，且不能备份path路径外的链接文件</span></span><br><span class="line">use chroot = yes</span><br><span class="line"><span class="comment"># 只读</span></span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line"><span class="comment"># 只写</span></span><br><span class="line">write only = no</span><br><span class="line"><span class="comment"># 设定白名单，可以指定IP段（172.18.50.1/255.255.255.0）,各个Ip段用空格分开</span></span><br><span class="line">hosts allow = 172.18.50.110 172.18.50.111</span><br><span class="line">hosts deny = *</span><br><span class="line"><span class="comment"># 允许的客户端最大连接数</span></span><br><span class="line">max connections = 4</span><br><span class="line"><span class="comment"># 欢迎文件的路径，非必须</span></span><br><span class="line"><span class="comment"># motd file = /etc/rsync/rsyncd.motd</span></span><br><span class="line"><span class="comment"># pid文件路径</span></span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line"><span class="comment"># 记录传输文件日志</span></span><br><span class="line">transfer logging = yes</span><br><span class="line"><span class="comment"># 日志文件格式</span></span><br><span class="line"><span class="built_in">log</span> format = %t %a %m %f %b</span><br><span class="line"><span class="comment"># 指定日志文件</span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsync.log</span><br><span class="line"><span class="comment"># 剔除某些文件或目录，不同步</span></span><br><span class="line">exclude = lost+found/</span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">timeout = 900</span><br><span class="line">ignore nonreadable = yes</span><br><span class="line"><span class="comment"># 设置不需要压缩的文件</span></span><br><span class="line">dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块，可以配置多个，使用如: sate@172.18.50.125::test</span></span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line"><span class="comment"># 模块的根目录，同步目录，要注意权限</span></span><br><span class="line">path = /tmp/nginx</span><br><span class="line"><span class="comment"># 是否允许列出模块内容</span></span><br><span class="line">list = no</span><br><span class="line"><span class="comment"># 忽略错误</span></span><br><span class="line">ignore errors</span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line">comment = ftp <span class="built_in">export</span> area</span><br><span class="line"><span class="comment"># 模块验证的用户名称，可使用空格或者逗号隔开多个用户名</span></span><br><span class="line">auth users = sate</span><br><span class="line"><span class="comment"># 模块验证密码文件 可放在全局配置里</span></span><br><span class="line">secrets file = /etc/rsync/rsyncd.secrets</span><br><span class="line"><span class="comment"># 剔除某些文件或目录，不同步</span></span><br><span class="line">exclude = lost+found/ conf/ man/</span><br></pre></td></tr></table></figure></li>
<li>其中：<ul>
<li>[test]后面为子模块，可以设置多个，以对应不同的同步目录</li>
<li>rsyncd.secrets为密码的文件，内容为：“用户名:密码”</li>
<li>注意，一定要运行<code>chmod 600 rsyncd.secrets</code>修改权限，密码文件必须只有本用户可以修改，否则程序运行会报错</li>
</ul>
</li>
</ul>
<h2 id="Windows客户端配置方法"><a href="#Windows客户端配置方法" class="headerlink" title="Windows客户端配置方法"></a>Windows客户端配置方法</h2><ul>
<li>下载cwrsync软件，如：<a href="http://www.7xdown.com/downinfo/123802.html">http://www.7xdown.com/downinfo/123802.html</a></li>
</ul>
<h2 id="配置好后的使用方法"><a href="#配置好后的使用方法" class="headerlink" title="配置好后的使用方法"></a>配置好后的使用方法</h2><ul>
<li>修改rsync.conf，增加子模块，修改”path”为需要同步的目录</li>
<li>Ubuntu端运行<code>rsync --daemon --config=rsync.conf</code>重新启动服务</li>
<li>Windows端运行：<br><code>rsync.exe -vzrtopgu --progress --port=端口 --delete 用户名@IP地址::模块名称 /cygdrive/E/路径</code></li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu 环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>U-Net网络训练自己的数据集-踏坑记录</title>
    <url>/DeepLearning/U-Net%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86-%E8%B8%8F%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>mark一下用U-Net网络训练自己的数据集中遇到的坑<br><span id="more"></span></p>
</blockquote>
<h2 id="Pytorch-U-Net"><a href="#Pytorch-U-Net" class="headerlink" title="Pytorch U-Net"></a>Pytorch U-Net</h2><p>按照惯例：</p>
<p>GitHub链接：<a href="https://github.com/milesial/Pytorch-UNet">https://github.com/milesial/Pytorch-UNet</a></p>
<p>论文链接：<a href="https://arxiv.org/pdf/1505.04597v1.pdf">https://arxiv.org/pdf/1505.04597v1.pdf</a></p>
<h3 id="参考贴"><a href="#参考贴" class="headerlink" title="参考贴"></a>参考贴</h3><ol>
<li><p>代码修改：<a href="https://blog.csdn.net/jcfszxc/article/details/106289555">【记录】使用Pytorch-UNet训练自己的数据集</a></p>
</li>
<li><p>准备数据集、训练：<a href="https://blog.csdn.net/candice5566/article/details/114179718">U-net复现pytorch版本 以及制作自己的数据集并训练</a></p>
</li>
<li><p>多类别训练：<a href="https://blog.csdn.net/brf_UCAS/article/details/112383722">Pytorch下实现Unet对自己多类别数据集的语义分割</a></p>
</li>
</ol>
<h3 id="踏坑过程"><a href="#踏坑过程" class="headerlink" title="踏坑过程"></a>踏坑过程</h3><ul>
<li>先按照参考贴1，训练了细胞的数据集进行了测试，只需要修改一下channel</li>
<li>然后安装labelme准备制作数据集</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习 语义分割 U-Net</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/HelloWorld/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Example</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu深度学习环境配置踏坑记录</title>
    <url>/DeepLearning/Ubuntu%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%8F%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>mark一下配置工作站环境中遇到的坑<br><span id="more"></span></p>
</blockquote>
<h1 id="显卡驱动-amp-CUDA"><a href="#显卡驱动-amp-CUDA" class="headerlink" title="显卡驱动 &amp; CUDA"></a>显卡驱动 &amp; CUDA</h1><h3 id="1-显卡驱动常见问题"><a href="#1-显卡驱动常见问题" class="headerlink" title="1 显卡驱动常见问题"></a>1 显卡驱动常见问题</h3><ul>
<li><p>nvidia-smi报错</p>
<ul>
<li><p><code>Failed to initialize NVML: Driver/library version mismatch</code></p>
<ul>
<li>重启会好</li>
</ul>
</li>
<li><p><code>NVIDIA-SMI has failed because it couldn&#39;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</code></p>
<ul>
<li><p>查看驱动版本</p>
<p><code>$ ls /usr/src/</code></p>
</li>
<li><p>内核绑定驱动版本</p>
<p><code>$ sudo dkms install -m nvidia -v 460.39</code></p>
</li>
<li><p>一般是因为内核头没装：<code>Error! Your kernel headers for kernel 4.15.0-135-generic cannot be found.</code></p>
<p><code>$ sudo apt-get upgrade linux-image-generic #检查内核版本</code></p>
<p><code>$ sudo apt-get install linux-headers-$(uname -r) #安装对应的内核头</code></p>
</li>
</ul>
</li>
<li><p>nvidia-smi运行慢</p>
<ul>
<li><code>$ sudo nvidia-smi -pm 1</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-Conda环境问题"><a href="#2-Conda环境问题" class="headerlink" title="2 Conda环境问题"></a>2 Conda环境问题</h3><ul>
<li><p>CondaHTTPError: HTTP 000 CONNECTION FAILED for url</p>
<ul>
<li>貌似是源的问题<ul>
<li>恢复原始源，直接删除了.condarc</li>
<li>更换中科大源</li>
<li>源里边的https改为http（看到说可行，没尝试）</li>
</ul>
</li>
</ul>
</li>
<li><p>The environment is inconsistent, please check the package plan carefully</p>
<ul>
<li><p>升级所有包</p>
<p><code>conda update --all</code></p>
</li>
<li><p>不行就用下面这个，会安装很多包，没搞清楚是为什么，之后再卸掉numpy能删掉很多乱七八糟的包</p>
<p><code>conda install anaconda</code></p>
</li>
</ul>
</li>
<li><p>有莫名其妙问题的时候升级一下conda</p>
<p><code>conda update -n base conda</code></p>
</li>
<li><p>pkg_resources.DistributionNotFound: The ‘tensorboard-data-server<0.7.0,>=0.6.0’ distribution was not found and is required by tensorboard</p>
<ul>
<li>升级所有包，可能只需要升级tensorboard</li>
</ul>
</li>
<li><p><strong>清理没用的包</strong></p>
<p><code>conda clean -p      //删除没有用的包</code><br><code>conda clean -t      //tar打包</code><br><code>conda clean -y -a //删除所有的安装包及cache</code></p>
</li>
</ul>
<h3 id="3-开机自启动"><a href="#3-开机自启动" class="headerlink" title="3 开机自启动"></a>3 开机自启动</h3><ul>
<li><p><strong>在rc.local文件中添加启动脚本</strong></p>
<ul>
<li>rc.local脚本是一个ubuntu开机后会自动执行的脚本，我们可以在该脚本内添加命令行指令。该脚本位于/etc/路径下，需要root权限才能修改。<br>该脚本具体格式如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -e</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rc.local</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class="line"><span class="comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class="line"><span class="comment"># value on error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to enable or disable this script just change the execution</span></span><br><span class="line"><span class="comment"># bits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default this script does nothing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#任务脚本</span></span><br><span class="line"><span class="comment">#自动执行启动脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;看到这行字，说明添加自启动脚本成功。2021-05-12&quot;</span> &gt; /usr/<span class="built_in">local</span>/test.log</span><br><span class="line">/home/user/start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开mate终端，并在其中运行脚本</span></span><br><span class="line">mate-terminal -x /home/myname/mysetup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#任务脚本</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu 环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 清理C盘 释放空间 方法汇总</title>
    <url>/Windows/Windows%20%E6%B8%85%E7%90%86C%E7%9B%98%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%20%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<blockquote>
<p>汇总Windows清理C盘空间的各种方法</p>
<span id="more"></span>
</blockquote>
<ul>
<li><strong>参考链接：</strong><a href="https://zhuanlan.zhihu.com/p/301375135">C盘莫名其妙就满了？手把手教你深度清理C盘，长久释放C盘空间</a></li>
</ul>
<h2 id="查看空间占用情况"><a href="#查看空间占用情况" class="headerlink" title="查看空间占用情况"></a>查看空间占用情况</h2><div class="note info">
            <p><strong>使用 SpaceSniffer 查看分区各文件的空间占用情况</strong></p>
          </div>
<p>下载地址：<a href="http://www.uderzo.it/main_products/space_sniffer/">http://www.uderzo.it/main_products/space_sniffer/</a></p>
<p><img src="..\images\spacesniffer.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>垃圾清理</tag>
      </tags>
  </entry>
  <entry>
    <title>office - 如何优雅地输入数学公式</title>
    <url>/Windows/office-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>office输入公式的快捷语法详细介绍<br><span id="more"></span></p>
</blockquote>
<h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h1><p>最近用word写作业要输很多公式，网上学习了一些小技巧，感觉终于感受到了用word输公式的快乐，表示再也不怕word的公式不好看了，也不需要频繁切换鼠标键盘了，写个帖子稍微总结一下常用操作。</p>
<p>先放上一些主要的参考链接：</p>
<ul>
<li><strong>官方说明：<a href="[https://support.microsoft.com/zh-cn/office/word-%e4%b8%ad%e4%bd%bf%e7%94%a8-unicodemath-%e5%92%8c-latex-%e7%9a%84%e7%ba%bf%e6%80%a7%e6%a0%bc%e5%bc%8f%e5%85%ac%e5%bc%8f-2e00618d-b1fd-49d8-8cb4-8d17f25754f8?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn](https://support.microsoft.com/zh-cn/office/word-中使用-unicodemath-和-latex-的线性格式公式-2e00618d-b1fd-49d8-8cb4-8d17f25754f8?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn">Word 中使用 UnicodeMath 和 LaTeX 的线性格式公式</a>)</strong></li>
<li><strong>Jacob Zhong 非常全面的总结：<a href="https://zyxin.xyz/blog/2017-08/WordMath/">Word - 快速输入数学公式</a></strong></li>
</ul>
<h1 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1.快捷键"></a>1.快捷键</h1><ul>
<li><strong><code>Alt</code></strong>+<strong> <code>=</code></strong><ul>
<li>插入新公式，或将当前选中的内容变换为公式</li>
</ul>
</li>
<li><strong><code>Ctrl</code></strong> + <strong><code>I</code></strong><ul>
<li>将公式设为斜体，可以在插入公式后立即设置，这样打出来的就直接是斜体了，减少了鼠标选中的操作</li>
</ul>
</li>
<li><strong><code>空格</code></strong><ul>
<li>输入快捷命令后最常用的格式转换键，即输入快捷命令后，按下空格，公式即会变成对应的格式</li>
</ul>
</li>
<li><strong><code>Enter</code></strong><ul>
<li>在部分场景下用于格式转换+回车</li>
</ul>
</li>
</ul>
<h1 id="2-常用符号快捷输入"><a href="#2-常用符号快捷输入" class="headerlink" title="2. 常用符号快捷输入"></a>2. 常用符号快捷输入</h1><p>主要是这一部分符号的输入：</p>
<p><img src="/images/WordFormulaSymbol.png" alt="img"></p>
<p><strong>关键方法：<code>\ + 快捷命令 + 空格</code></strong></p>
<p>命令解释：”\\”作为转义符，鼠标停留在符号上时会出现相应的快捷命令，比较好记，最后敲空格实现格式转换</p>
<p><img src="/images/WordFormulaSymbol-theta.png" alt="img"></p>
<p>一些栗子：</p>
<ul>
<li><code>\alpha</code> $\rightarrow$ $\alpha$</li>
<li><code>\beta</code> $\rightarrow$ $\beta$</li>
<li><code>\pi</code> $\rightarrow$ $\pi$</li>
<li><code>\varphi</code> $\rightarrow$ $\varphi$</li>
<li><code>...</code></li>
</ul>
<p>另外，有一些常用的数学符号，不需要转义符word也会自动合并</p>
<ul>
<li><code>/=</code> $\rightarrow$ $\neq$</li>
<li><code>+-</code> $\rightarrow$ $\pm$</li>
<li><code>&lt;=</code> $\rightarrow$ $\leq$</li>
<li><code>...</code></li>
</ul>
<p>大部分快捷命令和LaTeX，Markdown等都差不多，还是比较好记的。</p>
<h1 id="3-常用结构快捷输入"><a href="#3-常用结构快捷输入" class="headerlink" title="3. 常用结构快捷输入"></a>3. 常用结构快捷输入</h1><p>接下来一些常用的最费鼠标的各种结构（剩下一些用到的时候再来补充，更详细的可以参考帖子开头给的参考链接）：</p>
<p><img src="/images/WordFormulaStructures.png" alt="img"></p>
<h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><ul>
<li><code>a/b</code> $\rightarrow$ $\frac{a}{b}$</li>
<li><code>a\sdiv b</code> $\rightarrow$ $a/b$</li>
<li><code>\partial a/\partial b</code> $\rightarrow$ $\frac{\partial a}{\partial b}$</li>
<li><code>\Delta a/\Delta b</code> $\rightarrow$ $\frac{\Delta a}{\Delta b}$</li>
</ul>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><ul>
<li><code>a^b</code> $\rightarrow$ $a^b$</li>
<li><code>a_b</code> $\rightarrow$ $a_b$</li>
<li><code>a_b^c</code> $\rightarrow$ $a_b^c$</li>
<li><code>(_c^b)a</code> $\rightarrow$ $_c^ba$</li>
</ul>
<h2 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h2><ul>
<li><code>\sqrt a</code> $\rightarrow$ $\sqrt a$</li>
<li><code>\sqrt (b&amp;a)</code> $\rightarrow$ $\sqrt[b]{a}$</li>
<li><code>\cbrt a</code> $\rightarrow$ $\sqrt[3]{a}$</li>
</ul>
<h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><ul>
<li><code>\int \of a</code> $\rightarrow$ $\int{a}$</li>
<li><code>\iint \of a</code> $\rightarrow$ $\iint{a}$</li>
<li><code>\int^b_c a</code> $\rightarrow$ $\int^b_c{a}$</li>
</ul>
<h2 id="大型运算符"><a href="#大型运算符" class="headerlink" title="大型运算符"></a>大型运算符</h2><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>输入对应的括号后点空格</p>
<ul>
<li><code>(a+b)</code> $\rightarrow$ $(a+b)$</li>
<li><code>&#123;a\times [b\times (c+d)]&#125;</code> $\rightarrow$ ${a\times[b\times(c+d)]}$</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><ul>
<li><code>a\dot</code> $\rightarrow$ $\dot{a}$</li>
<li><code>a\ddot</code> $\rightarrow$ $\ddot{a}$</li>
<li><code>a\hat</code> $\rightarrow$ $\hat{a}$</li>
<li><code>a\tilde</code> $\rightarrow$ $\tilde{a}$</li>
</ul>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><ul>
<li><code>\matrix (a&amp;b@c&amp;d)</code> $\rightarrow$ <script type="math/tex">\matrix{a&b \\ c&d}</script></li>
</ul>
<h1 id="4-自动编号"><a href="#4-自动编号" class="headerlink" title="4. 自动编号"></a>4. 自动编号</h1><p>以前公式自动编号我都是用一个表格，左边放公式，右边放编号，整体效果还行但还是不够完美，后来发现其实Word的公式有带编号的格式。</p>
<p><strong>关键方法：在公式右边输入<code>#()</code>后按回车（这里必须回车，空格不行），随后在格式化后的括号中插入自动编号即可。</strong></p>
<p>编号格式化之后的效果如下图：</p>
<p><img src="/images/WordFormulaAutoNumbering.png" alt="img"></p>
<p>然后在括号中<strong>插入-文档部件-域-编号-AutoNum-1,2,3</strong>即可，其他公式直接复制这个编号过去，文档中的公式即实现了自动编号。</p>
<p><img src="/images/WordFormulaAutoNumbering-InsertNum.png" alt="img"></p>
<blockquote>
<p>为了写这篇帖子还把Markdown的公式过了一遍，，，感觉一些较为简单的公式还是Word稍微方便一些😁</p>
</blockquote>
]]></content>
      <categories>
        <category>c++ coding</category>
      </categories>
      <tags>
        <tag>office</tag>
        <tag>word</tag>
        <tag>公式</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 下深度学习环境配置</title>
    <url>/DeepLearning/Ubuntu%2018.04%E4%B8%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu 18.04 下深度学习环境配置<br><span id="more"></span></p>
</blockquote>
<p>首先可以参考我的上一篇博客安装好Ubuntu 18.04：<a href="https://brighthammer.github.io/2020/03/22/Ubuntu%2018.04常用软件安装与设置">Ubuntu 18.04常用软件安装与设置</a><br>下文参考链接：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjYxNzU2MQ==&amp;mid=2247483778&amp;idx=1&amp;sn=c00b3bdd8b35744edb75bf4dc620e945&amp;chksm=fa0d5f34cd7ad6222b5ddfbd10ffb3ed253df223c92556d27eaa18cc8e896201095d46cf357e&amp;mpshare=1&amp;scene=1&amp;srcid=0110rwNHgqJpldm1IHEwFvtE#rd">NVIDIA显卡深度学习环境配置教程</a></p>
<h2 id="1-安装显卡驱动"><a href="#1-安装显卡驱动" class="headerlink" title="1. 安装显卡驱动"></a>1. 安装显卡驱动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:xorg-edgers/ppa <span class="comment">#添加ppa源</span></span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa <span class="comment">#添加ppa源</span></span><br><span class="line">sudo apt-get update <span class="comment">#更新apt-get</span></span><br><span class="line">sudo apt-get install nvidia-drivers-410 <span class="comment">#安装410版本的driver</span></span><br></pre></td></tr></table></figure>
<p>用以下命令进行测试：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi <span class="comment">#若列出GPU的信息列表，表示驱动安装成功</span></span><br><span class="line">nvidia-settings <span class="comment">#若弹出设置对话框，亦表示驱动安装成功</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-安装cuda与cudnn"><a href="#2-安装cuda与cudnn" class="headerlink" title="2. 安装cuda与cudnn"></a>2. 安装cuda与cudnn</h2><p>详见参考链接，注意各个安装包版本对应</p>
<h2 id="3-安装MiniConda与pytorch环境"><a href="#3-安装MiniConda与pytorch环境" class="headerlink" title="3. 安装MiniConda与pytorch环境"></a>3. 安装MiniConda与pytorch环境</h2><ul>
<li><strong>Miniconda安装</strong><br>参考链接：<a href="https://zhuanlan.zhihu.com/p/32925500">Anaconda介绍、安装及使用教程</a><br>下载链接：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a><br>下载对应版本并运行<code>bash Miniconda*.sh</code>进行安装<br>在.bashrc文件中加入<code>conda deactivate</code>可以去掉终端中的(base)</li>
<li><strong>创建虚拟环境并安装pytorch</strong><br><code>conda create -n pytorch python=3.7 numpy</code><br>进入<a href="https://pytorch.org/get-started/locally/">pytorch官网</a>选择对应版本，运行对应命令，并指定清华的源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.0 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br></pre></td></tr></table></figure>
<h2 id="4-安装OpenCV"><a href="#4-安装OpenCV" class="headerlink" title="4. 安装OpenCV"></a>4. 安装OpenCV</h2><p>参考链接：<a href="https://blog.csdn.net/ksws0292756/article/details/79511170">Ubuntu 16.04 安装opencv的各种方法</a></p>
<ul>
<li>编译cpp版本可能遇到的问题</li>
</ul>
<ol>
<li>与cuda有关：……</li>
</ol>
<ul>
<li>安装完后验证是否成功，查看opencv版本：<code>pkg-config --modversion opencv</code><h2 id="5-安装darknet"><a href="#5-安装darknet" class="headerlink" title="5. 安装darknet"></a>5. 安装darknet</h2>参考链接：<a href="https://pjreddie.com/darknet/yolo/">YOLOv3</a></li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu 深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04常用软件安装与设置</title>
    <url>/Ubuntu/Ubuntu%2018.04%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu 18.04 的安装和使用前的基本配置<br><span id="more"></span></p>
</blockquote>
<h2 id="1-系统安装"><a href="#1-系统安装" class="headerlink" title="1. 系统安装"></a>1. 系统安装</h2><ul>
<li>参考教程：<a href="https://blog.csdn.net/sinat_18897273/article/details/71191389">https://blog.csdn.net/sinat_18897273/article/details/71191389</a></li>
<li>可能遇到的问题：</li>
</ul>
<ol>
<li>安装时会黑屏，解决方案：<a href="https://blog.csdn.net/cheneykl/article/details/79111618">https://blog.csdn.net/cheneykl/article/details/79111618</a></li>
<li>挂载对应分区：<a href="https://www.cnblogs.com/littleby/p/9843620.html">https://www.cnblogs.com/littleby/p/9843620.html</a></li>
</ol>
<h2 id="2-常用软件与设置"><a href="#2-常用软件与设置" class="headerlink" title="2. 常用软件与设置"></a>2. 常用软件与设置</h2><h3 id="2-1-设置源与网络连接"><a href="#2-1-设置源与网络连接" class="headerlink" title="2.1 设置源与网络连接"></a>2.1 设置源与网络连接</h3><ul>
<li><p><strong>设置浙大源：</strong> <a href="https://mirrors.zju.edu.cn/">https://mirrors.zju.edu.cn/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>将文件的内容替换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic main universe restricted multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-security main universe restricted multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-updates main universe restricted multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-backports main universe restricted multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic main universe restricted multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-security main universe restricted multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-updates main universe restricted multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;ubuntu bionic-backports main universe restricted multiverse</span><br></pre></td></tr></table></figure>
<div class="note warning">
            <p>注意修改版本号：1804是“bionic”</p>
          </div>
</li>
<li><p><strong>安装L2TP，连接网络</strong><br>参考链接：<a href="https://blog.csdn.net/dengying201/article/details/82965650">https://blog.csdn.net/dengying201/article/details/82965650</a><br><code>sudo apt-get install network-manager-l2tp-gnome</code></p>
<h3 id="2-2-安装常用软件与工具"><a href="#2-2-安装常用软件与工具" class="headerlink" title="2.2 安装常用软件与工具"></a>2.2 安装常用软件与工具</h3></li>
</ul>
<p>参考链接：<a href="https://mp.weixin.qq.com/s/0acsbXpxnSUBPiQh2ka-dw?">安装Ubuntu后应该做的事</a></p>
<ul>
<li><strong>安装tim与微信</strong><br>参考链接：<a href="https://www.lulinux.com/archives/1319">2019年wine QQ最完美解决方案</a></li>
<li><strong>安装Terminator终结者</strong><br>参考链接：<a href="https://blog.csdn.net/MrGong_/article/details/77817018">Ubuntu终端多窗口分屏Terminator</a><br><code>sudo apt install -y terminator</code></li>
</ul>
<h2 id="3-深度学习环境配置"><a href="#3-深度学习环境配置" class="headerlink" title="3. 深度学习环境配置"></a>3. 深度学习环境配置</h2><p>参考链接：<a href="https://brighthammer.github.io/2020/04/27/Ubuntu%2018.04下深度学习环境配置/#more">Ubuntu 18.04下深度学习环境配置</a></p>
<h2 id="4-其他设置"><a href="#4-其他设置" class="headerlink" title="4. 其他设置"></a>4. 其他设置</h2><h3 id="设置Windows引导Ubuntu"><a href="#设置Windows引导Ubuntu" class="headerlink" title="设置Windows引导Ubuntu"></a>设置Windows引导Ubuntu</h3><p>参考链接：<a href="https://blog.csdn.net/qq_39571318/article/details/89789985">Ubuntu与Windows双系统设置为Windows引导</a></p>
<h3 id="设置开机自动挂载分区"><a href="#设置开机自动挂载分区" class="headerlink" title="设置开机自动挂载分区"></a>设置开机自动挂载分区</h3><p>参考链接：<a href="https://blog.csdn.net/qq_39571318/article/details/89790734">Ubuntu 18.04将分区挂载到/home并设置开机自动挂载分区</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu终端常用命令</title>
    <url>/Terminal/Ubuntu%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>经常忘记的Ubuntu终端命令，mark一下<br><span id="more"></span></p>
</blockquote>
<h1 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h1><ul>
<li><p>超级权限文件夹<br><code>sudo nautilus</code></p>
</li>
<li><p>创建新文件<br><code>touch newfile.txt</code></p>
</li>
<li><p>创建文件夹<br><code>mkdir newdir</code></p>
</li>
<li><p>创建文件夹快捷方式<br><code>ln -s /home/panda/Programs/ ~/桌面/Programs</code></p>
</li>
<li><p>统计文件夹下文件数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l | grep <span class="string">&quot;^-&quot;</span> | wc -l     <span class="comment"># 统计当前目录下文件的个数（不包括目录）</span></span><br><span class="line">ls -lR | grep <span class="string">&quot;^-&quot;</span> | wc -l    <span class="comment"># 统计当前目录下文件的个数（包括子目录）</span></span><br><span class="line">ls -lR | grep <span class="string">&quot;^d&quot;</span> | wc -l    <span class="comment"># 查看某目录下文件夹(目录)的个数（包括子目录）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅打包，并非压缩</span></span><br><span class="line">tar -xvf FileName.tar         <span class="comment"># 解包</span></span><br><span class="line">tar -cvf FileName.tar DirName <span class="comment"># 将DirName和其下所有文件（夹）打包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gz</span></span><br><span class="line">gunzip FileName.gz  <span class="comment"># 解压1</span></span><br><span class="line">gzip -d FileName.gz <span class="comment"># 解压2</span></span><br><span class="line">gzip FileName       <span class="comment"># 压缩，只能压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar.xz</span></span><br><span class="line">tar -xvf FileName.tar.xz   <span class="comment"># 解压1</span></span><br><span class="line">tar -xvJf FileName.tar.xz  <span class="comment"># 解压2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.gz 和 .tgz</span></span><br><span class="line">tar -zxvf FileName.tar.gz               <span class="comment"># 解压</span></span><br><span class="line">tar -zcvf FileName.tar.gz DirName       <span class="comment"># 将DirName和其下所有文件（夹）压缩</span></span><br><span class="line">tar -C DesDirName -zxvf FileName.tar.gz <span class="comment"># 解压到目标路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感觉.zip占用空间比.tar.gz大</span></span><br><span class="line">unzip FileName.zip          <span class="comment"># 解压</span></span><br><span class="line">zip FileName.zip DirName    <span class="comment"># 将DirName本身压缩</span></span><br><span class="line">zip -r FileName.zip DirName <span class="comment"># 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mac和linux并没有自带rar，需要去下载</span></span><br><span class="line">rar x FileName.rar      <span class="comment"># 解压</span></span><br><span class="line">rar a FileName.rar DirName <span class="comment"># 压缩</span></span><br></pre></td></tr></table></figure>
<h1 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h1></li>
<li><p>查看权限：</p>
<p><code>ls -l</code></p>
<p><code>ls -ld</code></p>
</li>
<li><p>修改文件或目录的拥有者</p>
<p><code>sudo chown user.group file/dir</code></p>
<p><code>sudo chown -R user.group dir # 加-R设置文件夹和所有子文件夹</code></p>
</li>
<li><p>设置文件和文件夹权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 ××× <span class="comment"># 只有所有者有读和写的权限</span></span><br><span class="line">sudo chmod 644 ××× <span class="comment"># 所有者有读和写的权限，组用户只有读的权限</span></span><br><span class="line">sudo chmod 700 ××× <span class="comment"># 只有所有者有读和写以及执行的权限</span></span><br><span class="line">sudo chmod 666 ××× <span class="comment"># 每个人都有读和写的权限</span></span><br><span class="line">sudo chmod -R 777 ××× <span class="comment"># 每个人都有读和写以及执行的权限</span></span><br><span class="line"><span class="comment"># 0 [000] 无任何权限</span></span><br><span class="line"><span class="comment"># 4 [100] 只读权限</span></span><br><span class="line"><span class="comment"># 6 [110] 读写权限</span></span><br><span class="line"><span class="comment"># 7 [111] 读写执行权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod abc file </span></span><br><span class="line"><span class="comment"># 其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。 </span></span><br><span class="line"><span class="comment"># r=4，w=2，x=1 </span></span><br><span class="line"><span class="comment"># 若要rwx属性则4+2+1=7； </span></span><br><span class="line"><span class="comment"># 若要rw-属性则4+2=6； </span></span><br><span class="line"><span class="comment"># 若要r-x属性则4+1=5。 </span></span><br></pre></td></tr></table></figure>
<ul>
<li>例如：<br><code>sudo chmod 777 file/dir</code></li>
</ul>
</li>
<li><p>设置文件可执行</p>
<p><code>chmod +x file.sh</code></p>
</li>
</ul>
<h1 id="环境-软件相关"><a href="#环境-软件相关" class="headerlink" title="环境/软件相关"></a>环境/软件相关</h1><ul>
<li>查看opencv版本<br><code>pkg-config --modversion opencv</code></li>
<li><p>ssh后台运行程序</p>
<ul>
<li>nohub: no hang up</li>
<li>2&gt;&amp;1: 将标准出错重定向到标准输出</li>
<li>&amp;: 后台运行</li>
</ul>
<p><code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code></p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li>刷新dns的缓存：<br><code>sudo /etc/init.d/nscd restart</code><br>如果发现提示命令找不到：sudo: /etc/init.d/nscd: command not found<br>需要先安装nscd包：<br><code>sudo apt-get install nscd</code></li>
<li>重启网络：<br><code>sudo /etc/init.d/networking restart</code></li>
<li><p>修改grub参数并更新grub<br><code>sudo vim /etc/default/grub</code><br><code>sudo update-grub</code></p>
</li>
<li><p>设置ssh时的终端颜色<br><code>tput colors</code> 可以查看当前色彩深度<br>在.bashrc中加入 <code>export TERM=&#39;xterm-256color</code> 可以设置为256色</p>
</li>
</ul>
<div class="note default">
            <p>Ubunt&amp; Vim 常用命令汇总壁纸 </p>
          </div>
<p><img src="/images/UbuntuCommand.jpg" alt=""></p>
<p><img src="https://wx1.sinaimg.cn/large/ee0f01e3gy1gc9ntrr42ij21ci0u07wh.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>文章样式测试帖</title>
    <url>/HelloWorld/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B8%96/</url>
    <content><![CDATA[<blockquote>
<p>文章样式测试帖<br><span id="more"></span></p>
</blockquote>
<p><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note default&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% note default %&#125; default &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default">
            <p>default </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125; primary &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary">
            <p>primary </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125; success &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note success">
            <p>success </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125; info &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>info </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note warning %&#125; warning &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning">
            <p>warning </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125; dager &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger">
            <p>dager </p>
          </div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger no-icon %&#125; danger no-icon &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger no-icon">
            <p>danger no-icon </p>
          </div>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>C++常用功能汇总-文件读写 计时 随机数</title>
    <url>/Coding/C-%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99-%E8%AE%A1%E6%97%B6-%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>C++常用功能：文件读写 计时 随机数 等的用法<br><span id="more"></span></p>
</blockquote>
<h1 id="1、字符串string类"><a href="#1、字符串string类" class="headerlink" title="1、字符串string类"></a>1、字符串string类</h1><ul>
<li><strong>参考链接：</strong><a href="https://www.cnblogs.com/lifexy/p/8642163.html">C++-string字符串类(详解)</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用构造函数：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str;        <span class="comment">//生成一个空字符串</span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>)</span>  <span class="comment">//等价于 str=&quot;ABC&quot;&lt;br&gt;</span></span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>, strlen)</span>  <span class="comment">// 将&quot;ABC&quot;存到str里,最多存储前strlen个字节</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ABC&quot;</span>,stridx,strlen)</span>   <span class="comment">//将&quot;ABC&quot;的stridx位置,做为字符串开头,存到str里.且最多存储strlen个字节.</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(strlen, <span class="string">&#x27;A&#x27;</span>)</span>  <span class="comment">//存储strlen个&#x27;A&#x27;到str里</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用成员函数：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;ABC&quot;</span>);　　　　　　　　<span class="comment">//清空string串,然后设置string串为&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">length</span>()；                 <span class="comment">//获取字符串长度</span></span><br><span class="line">str1.<span class="built_in">size</span>();　　　　　　　　　　　 <span class="comment">//获取字符串数量,等价于length()</span></span><br><span class="line">str1.<span class="built_in">capacity</span>();　　　　　　　　  <span class="comment">//获取容量,容量包含了当前string里不必增加内存就能使用的字符数</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>);　　　　　　     <span class="comment">//表示设置当前string里的串大小,若设置大小大于当前串长度,则用字符\0来填充多余的.</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="keyword">char</span> c);　　　　 <span class="comment">//设置串大小，若设置大小大于当前串长度,则用字符c来填充多余的</span></span><br><span class="line">str1.<span class="built_in">reserve</span>(<span class="number">10</span>);　　　　　　　　　<span class="comment">//设置string里的串容量,不会填充数据.</span></span><br><span class="line">str1.<span class="built_in">swap</span>(str2);        　　    <span class="comment">//替换str1 和 str2 的字符串</span></span><br><span class="line">str1.<span class="built_in">puch_back</span> (<span class="string">&#x27;A&#x27;</span>);    　　<span class="comment">//在str1末尾添加一个&#x27;A&#x27;字符,参数必须是字符形式</span></span><br><span class="line">str1.<span class="built_in">append</span> (<span class="string">&quot;ABC&quot;</span>);     　　<span class="comment">//在str1末尾添加一个&quot;ABC&quot;字符串,参数必须是字符串形式</span></span><br><span class="line">str1.<span class="built_in">insert</span> (<span class="number">2</span>,<span class="string">&quot;ABC&quot;</span>);       <span class="comment">//在str1的下标为2的位置,插入&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>);         　　　　<span class="comment">//删除下标为2的位置,比如: &quot;ABCD&quot; --&gt; &quot;AB&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>,<span class="number">1</span>);              <span class="comment">//从下标为2的位置删除1个,比如: &quot;ABCD&quot;  --&gt; &quot;ABD&quot;</span></span><br><span class="line">str1.<span class="built_in">clear</span>();           　　 <span class="comment">//删除所有</span></span><br><span class="line">str1.<span class="built_in">replace</span>(<span class="number">2</span>,<span class="number">4</span>, <span class="string">&quot;ABCD&quot;</span>); <span class="comment">//从下标为2的位置,替换4个字节,为&quot;ABCD&quot;</span></span><br><span class="line">str1.<span class="built_in">empty</span>();         　　 <span class="comment">//判断为空, 为空返回true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>与char*相互转换：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.<span class="built_in">c_str</span>();        <span class="comment">//string转为char*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *st = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">string st1 = st;</span><br><span class="line"><span class="function">string <span class="title">st2</span><span class="params">(st, st + strlen(st))</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>与数字的转换：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>&gt;</span></span><br><span class="line"><span class="comment">//-----------string转为数字：</span></span><br><span class="line"><span class="function">istringstream <span class="title">iss</span> <span class="params">(<span class="string">&quot;123.5&quot;</span>)</span></span>;    <span class="comment">//定义对象iss,初始化为&quot;123.5&quot; , </span></span><br><span class="line"><span class="comment">//等价于:</span></span><br><span class="line"><span class="comment">//istringstream iss;</span></span><br><span class="line"><span class="comment">//iss.str(&quot;123.5&quot;);                 //设置对象iss为&quot;123.5&quot; ,</span></span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"> <span class="keyword">if</span>(iss&gt;&gt;num)                 <span class="comment">//通过调用iss.operator &gt;&gt;(num), 将&quot;123.5&quot;转为数字,并返回bool类型变量</span></span><br><span class="line">    cout&lt;&lt;num &lt;&lt; endl;</span><br><span class="line"><span class="comment">//也可以通过临时对象转换：</span></span><br><span class="line">string str=<span class="string">&quot;123.5&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">istringstream</span>(str)&gt;&gt;num)        <span class="comment">//通过临时对象,来将str转为数字</span></span><br><span class="line">	cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line"><span class="comment">//或者将第3行,写为宏:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_NUM(str,num)     (istringstream(str)&gt;&gt;num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------数字转为string</span></span><br><span class="line">ostringstream oss;</span><br><span class="line">oss &lt;&lt;<span class="number">123.5</span>;                   <span class="comment">//相当于调用: oss.str(&quot;123.5&quot;);</span></span><br><span class="line">string str= oss.<span class="built_in">str</span>() ;</span><br><span class="line"><span class="comment">//也可以通过宏,这样写:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(num)     ( ((ostringstream&amp;)(ostringstream()&lt;&lt;num)).str() )</span></span><br><span class="line"><span class="keyword">double</span> num=<span class="number">123.5</span>;</span><br><span class="line">string str= <span class="built_in">TO_STRING</span>(<span class="number">123.5</span>);</span><br></pre></td></tr></table></figure>
<h1 id="2、文件读写"><a href="#2、文件读写" class="headerlink" title="2、文件读写"></a>2、文件读写</h1><ul>
<li><strong>参考链接：</strong><br><a href="https://blog.csdn.net/u011574296/article/details/72956446">Windows下对文件夹下所有图片批量重命名</a><br><a href="https://blog.csdn.net/guyuealian/article/details/77981953">C++读取文件夹中所有文件的路径，包含子文件夹</a></li>
</ul>
<h2 id="文本文件读取与写入"><a href="#文本文件读取与写入" class="headerlink" title="文本文件读取与写入"></a>文本文件读取与写入</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">fstream inFile, outFile;</span><br><span class="line"><span class="keyword">if</span>( (_access( <span class="string">&quot;in.txt&quot;</span>, <span class="number">0</span> )) != <span class="number">-1</span> )  </span><br><span class="line">&#123;  </span><br><span class="line">	<span class="built_in">printf_s</span>( <span class="string">&quot;File crt_ACCESS.C exists.\n&quot;</span> );</span><br><span class="line">	inFile.<span class="built_in">open</span>(<span class="string">&quot;in.txt&quot;</span>, ios::in | ios::binary);<span class="comment">//二进制读取</span></span><br><span class="line">&#125;</span><br><span class="line">outFile.<span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, ios::out | ios::binary);<span class="comment">//二进制写入</span></span><br><span class="line">inFile &gt;&gt; count;</span><br><span class="line">outFile &lt;&lt; count;</span><br><span class="line">inFile.<span class="built_in">close</span>();</span><br><span class="line">outFile.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure>
<h2 id="文件夹相关操作"><a href="#文件夹相关操作" class="headerlink" title="文件夹相关操作"></a>文件夹相关操作</h2><ul>
<li>判断文件夹是否存在</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span>  <span class="comment">//Win</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;pre name=<span class="string">&quot;code&quot;</span> class=<span class="string">&quot;cpp&quot;</span>&gt;<span class="keyword">int</span> <span class="built_in">access</span>(<span class="keyword">const</span> <span class="keyword">char</span>* _Filename, <span class="keyword">int</span> _AccessMode)</span><br><span class="line">_AccessMode:&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> R_OK 4 <span class="comment">/* Test for read permission. 读权限*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> W_OK 2 <span class="comment">/* Test for write permission. 写权限*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> X_OK 1 <span class="comment">/* Test for execute permission. 是否可执行*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> F_OK 0 <span class="comment">/* Test for existence. 是否存在*/</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建、删除文件夹</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br></pre></td></tr></table></figure>
<p>函数返回0表示成功，返回-1表示失败或不存在</p>
<h1 id="3、计时函数"><a href="#3、计时函数" class="headerlink" title="3、计时函数"></a>3、计时函数</h1><ul>
<li>参考链接：<a href="https://www.cnblogs.com/dwdxdy/p/3214905.html">【C/C++】计时函数比较</a></li>
</ul>
<h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><blockquote>
<p>time()获取当前的系统时间，返回的结果是一个time_t类型，其实就是一个==大整数==，其值表示从CUT（Coordinated Universal Time）时间1970年1月1日00:00:00（称为UNIX系统的Epoch时间）到当前时刻的秒数。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> start,stop;</span><br><span class="line">    start = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    stop = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%ld\n&quot;</span>,(stop-start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><blockquote>
<p>clock()函数返回从“开启这个程序进程”到“程序中调用clock()函数”时之间的CPU时钟计时单元（clock tick）数，在MSDN中称之为挂钟时间（wal-clock）<br>常量CLOCKS_PER_SEC，它用来表示一秒钟会有多少个时钟计时单元。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dur;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    end = <span class="built_in">clock</span>();</span><br><span class="line">    dur = (<span class="keyword">double</span>)(end - start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%f\n&quot;</span>,(dur/CLOCKS_PER_SEC));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="timeGetTime"><a href="#timeGetTime" class="headerlink" title="timeGetTime()"></a>timeGetTime()</h2><blockquote>
<p>timeGetTime()函数以毫秒计的系统时间。该时间为从系统开启算起所经过的时间,是windows api。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD t1,t2;</span><br><span class="line">    t1 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    t2 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%f\n&quot;</span>,(t2-t1)*<span class="number">1.0</span>/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4、随机数"><a href="#4、随机数" class="headerlink" title="4、随机数"></a>4、随机数</h1><ul>
<li><strong>参考链接：</strong><a href="http://notes.maxwi.com/2016/04/10/cpp-random/">C++随机数类random的使用</a></li>
</ul>
<h2 id="cstdlib中伪随机数"><a href="#cstdlib中伪随机数" class="headerlink" title="cstdlib中伪随机数"></a>cstdlib中伪随机数</h2><p>C语言中通过函数rand和srand来产生伪随机数，这两个函数包含在头文件cstdlib中，其中srand用来产生设置随机数种子，rand每次返回一个当前的种子对应的随机数，这两个函数的声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> seed)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这两个函数的原型形如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* rand: return pseudo-random integer on 0..32767 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* srand: set seed for rand() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然rand只能生成整数，需要小数时，只需要跟一个浮点数进行除法即可<br><div class="note info">
            <p><strong>一个生成[1, 15]的随机数例子：</strong></p>
          </div></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//random num range is min to max, template function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">cRandom</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (min + <span class="keyword">static_cast</span>&lt;T&gt;(max * <span class="built_in">rand</span>() / <span class="keyword">static_cast</span>&lt;T&gt;(RAND_MAX + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">//生成10个整数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;int: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; cRandom&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//生成10个小数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;double: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; cRandom&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成指定范围的随机数表达式：</p>
<blockquote>
<ul>
<li>要取得[a,b)的随机整数，使用(rand() % (b-a))+ a;</li>
<li>要取得[a,b]的随机整数，使用(rand() % (b-a+1))+ a;</li>
<li>要取得(a,b]的随机整数，使用(rand() % (b-a))+ a + 1;</li>
</ul>
</blockquote>
<p>通用公式:a + rand() % n；其中的a是起始值，n是整数的范围。</p>
<blockquote>
<ul>
<li>要取得a到b之间的随机整数，另一种表示：a + (int)b * rand() / (RAND_MAX + 1)。</li>
<li>要取得0～1之间的浮点数，可以使用rand() / double(RAND_MAX)。</li>
</ul>
</blockquote>
<h2 id="（2）C-11中的random类"><a href="#（2）C-11中的random类" class="headerlink" title="（2）C++11中的random类"></a>（2）C++11中的random类</h2><p>random类是C++11中增加的类，该类可以用于生成随机数，具有C语言中rand生成伪随机数的功能，但其功能更强大。原生支持生成浮点数，及分布类。</p>
<p>随机数发生器主要由分布对象和随机数引擎对象组成。其中随机数引擎用于根据随机数种子来产生随机数，分布对象对产生的随机数根据需求进行分布。<br>random中定义了多种随机数引擎及分布类型，常用的引擎是默认伪随机数引擎类default_random_engine，常用的分布类有产生整型分布的uniform_int_distribution，产生浮点型的分布uniform_real_distribution。</p>
<div class="note info">
            <p><strong>输出15个double类型的随机数的例子：</strong></p>
          </div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数接受三个参数分别指定随机数范围和种子，返回double</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">random_unint</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> min, <span class="keyword">unsigned</span> <span class="keyword">int</span> max, <span class="keyword">unsigned</span> <span class="keyword">int</span> seed = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::default_random_engine <span class="title">e</span><span class="params">(seed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">u</span><span class="params">(min, max)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">u</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">random_unint</span>(<span class="number">0</span>, <span class="number">15</span>, <span class="built_in">time</span>(<span class="literal">NULL</span>)) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning">
            <p>一个给定的随机数发生器一直会生成相同的随机数序列。一个函数如果定义了局部的随机数发生器，应该将其（包括引擎和分布对象）定义为static的，否则每次调用函数都会生成相同的序列。也就是说定义成static后每次调用还是之前那个发生器，第一次调用产生一批随机数，再次调用将产生接下来的随机数，否则每次调用产生的都是最前面的那些随机数。</p>
          </div>
<div class="note warning">
            <p>依然需要使用time来做为种子产生每个不同时刻都不同的随机序列，但由于time默认返回的是以秒计的时间，所以有可能多次使用的都是相同的种子。</p>
          </div>
<p><strong>伪随机数引擎</strong></p>
<ol>
<li>随机数引擎支持的操作如下：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Engine e; <span class="comment">//默认构造函数，使用该引擎类型的默认种子</span></span><br><span class="line"><span class="function">Engine <span class="title">e</span><span class="params">(s)</span></span>; <span class="comment">//使用整型s做为种子</span></span><br><span class="line">e.<span class="built_in">seed</span>(s); <span class="comment">//使用整型s重置引擎状态</span></span><br><span class="line">e.<span class="built_in">min</span>(); <span class="comment">//返回此引擎所能生成的最小和最大值</span></span><br><span class="line">e.<span class="built_in">max</span>();</span><br><span class="line">Engine::result_type <span class="comment">//此引擎生成的类型（unsigned）</span></span><br><span class="line">e.<span class="built_in">discard</span>(u); <span class="comment">//将引擎推进u步，u为unsigned long long类型</span></span><br></pre></td></tr></table></figure>
<ol>
<li>随机数引擎使用</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::default_random_engine e;   <span class="comment">//生成随机的无符号数</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">e</span>();       <span class="comment">//通过()调用对象生成下一个随机数并输出</span></span><br></pre></td></tr></table></figure>
<p><strong>分布</strong></p>
<ol>
<li>分布类型有很多种，常用的有返回整型的uniform_int_distribution和返回浮点型的uniform_real_distribution</li>
<li>分布支持的操作</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Dist d; <span class="comment">//默认构造函数</span></span><br><span class="line"><span class="function">Dist <span class="title">d</span><span class="params">(min, max)</span></span>; <span class="comment">//为d指定范围</span></span><br><span class="line"><span class="built_in">d</span>(e) <span class="comment">//e是一个随机数引擎对象</span></span><br><span class="line">d.<span class="built_in">min</span>() <span class="comment">//返回d(e)所能生成的最小值和最大值</span></span><br><span class="line">d.<span class="built_in">max</span>()</span><br><span class="line">d.<span class="built_in">reset</span>(); <span class="comment">//重置d的状态，使得随后对d的使用不依赖于d已经生成的值</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>c++ coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>文件读写</tag>
        <tag>计时</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常忘操作</title>
    <url>/Coding/Python%E5%B8%B8%E5%BF%98%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>Python经常忘记的操作：文件和文件夹操作 嵌套语句<br><span id="more"></span></p>
</blockquote>
<h1 id="1、文件和文件夹操作"><a href="#1、文件和文件夹操作" class="headerlink" title="1、文件和文件夹操作"></a>1、文件和文件夹操作</h1><p><strong>参考链接：</strong><a href="https://www.runoob.com/python3/python3-tutorial.html">Python 3 菜鸟教程</a></p>
<ul>
<li>判断路径是否存在</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tmpdir <span class="keyword">in</span> [mask_dir, viz_dir]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tmpdir):</span><br><span class="line">        os.mkdir(tmpdir)</span><br></pre></td></tr></table></figure>
<ul>
<li>常用构造函数：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str;        <span class="comment">//生成一个空字符串</span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>)</span>  <span class="comment">//等价于 str=&quot;ABC&quot;&lt;br&gt;</span></span></span><br><span class="line"><span class="function">string <span class="title">str</span> <span class="params">(<span class="string">&quot;ABC&quot;</span>, strlen)</span>  <span class="comment">// 将&quot;ABC&quot;存到str里,最多存储前strlen个字节</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;ABC&quot;</span>,stridx,strlen)</span>   <span class="comment">//将&quot;ABC&quot;的stridx位置,做为字符串开头,存到str里.且最多存储strlen个字节.</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(strlen, <span class="string">&#x27;A&#x27;</span>)</span>  <span class="comment">//存储strlen个&#x27;A&#x27;到str里</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>常用成员函数：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str1.<span class="built_in">assign</span>(<span class="string">&quot;ABC&quot;</span>);　　　　　　　　<span class="comment">//清空string串,然后设置string串为&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">length</span>()；                 <span class="comment">//获取字符串长度</span></span><br><span class="line">str1.<span class="built_in">size</span>();　　　　　　　　　　　 <span class="comment">//获取字符串数量,等价于length()</span></span><br><span class="line">str1.<span class="built_in">capacity</span>();　　　　　　　　  <span class="comment">//获取容量,容量包含了当前string里不必增加内存就能使用的字符数</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>);　　　　　　     <span class="comment">//表示设置当前string里的串大小,若设置大小大于当前串长度,则用字符\0来填充多余的.</span></span><br><span class="line">str1.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="keyword">char</span> c);　　　　 <span class="comment">//设置串大小，若设置大小大于当前串长度,则用字符c来填充多余的</span></span><br><span class="line">str1.<span class="built_in">reserve</span>(<span class="number">10</span>);　　　　　　　　　<span class="comment">//设置string里的串容量,不会填充数据.</span></span><br><span class="line">str1.<span class="built_in">swap</span>(str2);        　　    <span class="comment">//替换str1 和 str2 的字符串</span></span><br><span class="line">str1.<span class="built_in">puch_back</span> (<span class="string">&#x27;A&#x27;</span>);    　　<span class="comment">//在str1末尾添加一个&#x27;A&#x27;字符,参数必须是字符形式</span></span><br><span class="line">str1.<span class="built_in">append</span> (<span class="string">&quot;ABC&quot;</span>);     　　<span class="comment">//在str1末尾添加一个&quot;ABC&quot;字符串,参数必须是字符串形式</span></span><br><span class="line">str1.<span class="built_in">insert</span> (<span class="number">2</span>,<span class="string">&quot;ABC&quot;</span>);       <span class="comment">//在str1的下标为2的位置,插入&quot;ABC&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>);         　　　　<span class="comment">//删除下标为2的位置,比如: &quot;ABCD&quot; --&gt; &quot;AB&quot;</span></span><br><span class="line">str1.<span class="built_in">erase</span>(<span class="number">2</span>,<span class="number">1</span>);              <span class="comment">//从下标为2的位置删除1个,比如: &quot;ABCD&quot;  --&gt; &quot;ABD&quot;</span></span><br><span class="line">str1.<span class="built_in">clear</span>();           　　 <span class="comment">//删除所有</span></span><br><span class="line">str1.<span class="built_in">replace</span>(<span class="number">2</span>,<span class="number">4</span>, <span class="string">&quot;ABCD&quot;</span>); <span class="comment">//从下标为2的位置,替换4个字节,为&quot;ABCD&quot;</span></span><br><span class="line">str1.<span class="built_in">empty</span>();         　　 <span class="comment">//判断为空, 为空返回true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>与char*相互转换：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.<span class="built_in">c_str</span>();        <span class="comment">//string转为char*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *st = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">string st1 = st;</span><br><span class="line"><span class="function">string <span class="title">st2</span><span class="params">(st, st + strlen(st))</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>与数字的转换：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span>&gt;</span></span><br><span class="line"><span class="comment">//-----------string转为数字：</span></span><br><span class="line"><span class="function">istringstream <span class="title">iss</span> <span class="params">(<span class="string">&quot;123.5&quot;</span>)</span></span>;    <span class="comment">//定义对象iss,初始化为&quot;123.5&quot; , </span></span><br><span class="line"><span class="comment">//等价于:</span></span><br><span class="line"><span class="comment">//istringstream iss;</span></span><br><span class="line"><span class="comment">//iss.str(&quot;123.5&quot;);                 //设置对象iss为&quot;123.5&quot; ,</span></span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"> <span class="keyword">if</span>(iss&gt;&gt;num)                 <span class="comment">//通过调用iss.operator &gt;&gt;(num), 将&quot;123.5&quot;转为数字,并返回bool类型变量</span></span><br><span class="line">    cout&lt;&lt;num &lt;&lt; endl;</span><br><span class="line"><span class="comment">//也可以通过临时对象转换：</span></span><br><span class="line">string str=<span class="string">&quot;123.5&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">istringstream</span>(str)&gt;&gt;num)        <span class="comment">//通过临时对象,来将str转为数字</span></span><br><span class="line">	cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line"><span class="comment">//或者将第3行,写为宏:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_NUM(str,num)     (istringstream(str)&gt;&gt;num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------数字转为string</span></span><br><span class="line">ostringstream oss;</span><br><span class="line">oss &lt;&lt;<span class="number">123.5</span>;                   <span class="comment">//相当于调用: oss.str(&quot;123.5&quot;);</span></span><br><span class="line">string str= oss.<span class="built_in">str</span>() ;</span><br><span class="line"><span class="comment">//也可以通过宏,这样写:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(num)     ( ((ostringstream&amp;)(ostringstream()&lt;&lt;num)).str() )</span></span><br><span class="line"><span class="keyword">double</span> num=<span class="number">123.5</span>;</span><br><span class="line">string str= <span class="built_in">TO_STRING</span>(<span class="number">123.5</span>);</span><br></pre></td></tr></table></figure>
<h1 id="2、文件读写"><a href="#2、文件读写" class="headerlink" title="2、文件读写"></a>2、文件读写</h1><ul>
<li><strong>参考链接：</strong><br><a href="https://blog.csdn.net/u011574296/article/details/72956446">Windows下对文件夹下所有图片批量重命名</a><br><a href="https://blog.csdn.net/guyuealian/article/details/77981953">C++读取文件夹中所有文件的路径，包含子文件夹</a></li>
</ul>
<h2 id="文本文件读取与写入"><a href="#文本文件读取与写入" class="headerlink" title="文本文件读取与写入"></a>文本文件读取与写入</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">fstream inFile, outFile;</span><br><span class="line"><span class="keyword">if</span>( (_access( <span class="string">&quot;in.txt&quot;</span>, <span class="number">0</span> )) != <span class="number">-1</span> )  </span><br><span class="line">&#123;  </span><br><span class="line">	<span class="built_in">printf_s</span>( <span class="string">&quot;File crt_ACCESS.C exists.\n&quot;</span> );</span><br><span class="line">	inFile.<span class="built_in">open</span>(<span class="string">&quot;in.txt&quot;</span>, ios::in | ios::binary);<span class="comment">//二进制读取</span></span><br><span class="line">&#125;</span><br><span class="line">outFile.<span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, ios::out | ios::binary);<span class="comment">//二进制写入</span></span><br><span class="line">inFile &gt;&gt; count;</span><br><span class="line">outFile &lt;&lt; count;</span><br><span class="line">inFile.<span class="built_in">close</span>();</span><br><span class="line">outFile.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure>
<h2 id="文件夹相关操作"><a href="#文件夹相关操作" class="headerlink" title="文件夹相关操作"></a>文件夹相关操作</h2><ul>
<li>判断文件夹是否存在</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span>  <span class="comment">//Win</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;pre name=<span class="string">&quot;code&quot;</span> class=<span class="string">&quot;cpp&quot;</span>&gt;<span class="keyword">int</span> <span class="built_in">access</span>(<span class="keyword">const</span> <span class="keyword">char</span>* _Filename, <span class="keyword">int</span> _AccessMode)</span><br><span class="line">_AccessMode:&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> R_OK 4 <span class="comment">/* Test for read permission. 读权限*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> W_OK 2 <span class="comment">/* Test for write permission. 写权限*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> X_OK 1 <span class="comment">/* Test for execute permission. 是否可执行*/</span></span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> F_OK 0 <span class="comment">/* Test for existence. 是否存在*/</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建、删除文件夹</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br></pre></td></tr></table></figure>
<p>函数返回0表示成功，返回-1表示失败或不存在</p>
<h1 id="3、计时函数"><a href="#3、计时函数" class="headerlink" title="3、计时函数"></a>3、计时函数</h1><ul>
<li>参考链接：<a href="https://www.cnblogs.com/dwdxdy/p/3214905.html">【C/C++】计时函数比较</a></li>
</ul>
<h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><blockquote>
<p>time()获取当前的系统时间，返回的结果是一个time_t类型，其实就是一个==大整数==，其值表示从CUT（Coordinated Universal Time）时间1970年1月1日00:00:00（称为UNIX系统的Epoch时间）到当前时刻的秒数。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> start,stop;</span><br><span class="line">    start = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    stop = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%ld\n&quot;</span>,(stop-start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><blockquote>
<p>clock()函数返回从“开启这个程序进程”到“程序中调用clock()函数”时之间的CPU时钟计时单元（clock tick）数，在MSDN中称之为挂钟时间（wal-clock）<br>常量CLOCKS_PER_SEC，它用来表示一秒钟会有多少个时钟计时单元。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dur;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    end = <span class="built_in">clock</span>();</span><br><span class="line">    dur = (<span class="keyword">double</span>)(end - start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%f\n&quot;</span>,(dur/CLOCKS_PER_SEC));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="timeGetTime"><a href="#timeGetTime" class="headerlink" title="timeGetTime()"></a>timeGetTime()</h2><blockquote>
<p>timeGetTime()函数以毫秒计的系统时间。该时间为从系统开启算起所经过的时间,是windows api。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD t1,t2;</span><br><span class="line">    t1 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">    <span class="built_in">foo</span>();<span class="comment">//dosomething</span></span><br><span class="line">    t2 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Use Time:%f\n&quot;</span>,(t2-t1)*<span class="number">1.0</span>/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4、随机数"><a href="#4、随机数" class="headerlink" title="4、随机数"></a>4、随机数</h1><ul>
<li><strong>参考链接：</strong><a href="http://notes.maxwi.com/2016/04/10/cpp-random/">C++随机数类random的使用</a></li>
</ul>
<h2 id="cstdlib中伪随机数"><a href="#cstdlib中伪随机数" class="headerlink" title="cstdlib中伪随机数"></a>cstdlib中伪随机数</h2><p>C语言中通过函数rand和srand来产生伪随机数，这两个函数包含在头文件cstdlib中，其中srand用来产生设置随机数种子，rand每次返回一个当前的种子对应的随机数，这两个函数的声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> seed)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这两个函数的原型形如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* rand: return pseudo-random integer on 0..32767 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* srand: set seed for rand() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然rand只能生成整数，需要小数时，只需要跟一个浮点数进行除法即可<br><div class="note info">
            <p><strong>一个生成[1, 15]的随机数例子：</strong></p>
          </div></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//random num range is min to max, template function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">cRandom</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (min + <span class="keyword">static_cast</span>&lt;T&gt;(max * <span class="built_in">rand</span>() / <span class="keyword">static_cast</span>&lt;T&gt;(RAND_MAX + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">//生成10个整数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;int: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; cRandom&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">//生成10个小数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;double: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; cRandom&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成指定范围的随机数表达式：</p>
<blockquote>
<ul>
<li>要取得[a,b)的随机整数，使用(rand() % (b-a))+ a;</li>
<li>要取得[a,b]的随机整数，使用(rand() % (b-a+1))+ a;</li>
<li>要取得(a,b]的随机整数，使用(rand() % (b-a))+ a + 1;</li>
</ul>
</blockquote>
<p>通用公式:a + rand() % n；其中的a是起始值，n是整数的范围。</p>
<blockquote>
<ul>
<li>要取得a到b之间的随机整数，另一种表示：a + (int)b * rand() / (RAND_MAX + 1)。</li>
<li>要取得0～1之间的浮点数，可以使用rand() / double(RAND_MAX)。</li>
</ul>
</blockquote>
<div class="note info">
            <p><strong>输出15个double类型的随机数的例子：</strong></p>
          </div>
<div class="note warning">
            <p>一个给定的随机数发生器一直会生成相同的随机数序列。一个函数如果定义了局部的随机数发生器，应该将其（包括引擎和分布对象）定义为static的，否则每次调用函数都会生成相同的序列。也就是说定义成static后每次调用还是之前那个发生器，第一次调用产生一批随机数，再次调用将产生接下来的随机数，否则每次调用产生的都是最前面的那些随机数。</p>
          </div>
<div class="note warning">
            <p>依然需要使用time来做为种子产生每个不同时刻都不同的随机序列，但由于time默认返回的是以秒计的时间，所以有可能多次使用的都是相同的种子。</p>
          </div>
]]></content>
      <categories>
        <category>python coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>文件读写</tag>
        <tag>计时</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu利用Xorg.conf配置双屏扩展显示</title>
    <url>/Ubuntu/Ubuntu%E5%88%A9%E7%94%A8Xorg.conf%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%B1%8F%E6%89%A9%E5%B1%95%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu利用Xorg.conf配置双屏扩展显示<br><span id="more"></span></p>
</blockquote>
<p>参考链接：<a href="http://www.voidcn.com/article/p-apfthcbx-bkw.html">Linux xorg配置双屏幕显示</a><br>接了两个显示器，但是有一个因为用了劣质的DVI转VGA的转接头导致系统识别不出显示器的分辨率，然后每次开机都需要重新设置分辨率，很麻烦<br>NVIDIA X Server Settings有保存当前设置的功能但是不太行，重启之后还是要重新设置<br>想尽一切办法修改它保存的/etc/X11/xorg.conf文件终于找到了解决方案<br>关键是在Section “Screen”下面添加如下内容： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Option &quot;TwinView&quot;-------------------------------------------估计是告诉X使用双屏显示。 </span><br><span class="line">Option &quot;MetaModes&quot; &quot;1280*1024 1280*1024&quot;--------告诉X显示的分辨率，已经有了</span><br><span class="line">Option &quot;TwinView Orientation&quot; &quot;RightOf&quot;-------------估计这是告诉X附加的显示器在右侧。</span><br></pre></td></tr></table></figure>
<p>最后贴一下我完整的内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nvidia-settings: X configuration file generated by nvidia-settings</span><br><span class="line"># nvidia-settings:  version 418.56</span><br><span class="line"></span><br><span class="line">Section &quot;ServerLayout&quot;</span><br><span class="line">    Identifier     &quot;Layout0&quot;</span><br><span class="line">    Screen      0  &quot;Screen0&quot; 0 0</span><br><span class="line">    InputDevice    &quot;Keyboard0&quot; &quot;CoreKeyboard&quot;</span><br><span class="line">    InputDevice    &quot;Mouse0&quot; &quot;CorePointer&quot;</span><br><span class="line">    Option         &quot;Xinerama&quot; &quot;0&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Files&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Module&quot;</span><br><span class="line">    Load           &quot;dbe&quot;</span><br><span class="line">    Load           &quot;extmod&quot;</span><br><span class="line">    Load           &quot;type1&quot;</span><br><span class="line">    Load           &quot;freetype&quot;</span><br><span class="line">    Load           &quot;glx&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputDevice&quot;</span><br><span class="line"></span><br><span class="line">    # generated from default</span><br><span class="line">    Identifier     &quot;Mouse0&quot;</span><br><span class="line">    Driver         &quot;mouse&quot;</span><br><span class="line">    Option         &quot;Protocol&quot; &quot;auto&quot;</span><br><span class="line">    Option         &quot;Device&quot; &quot;&#x2F;dev&#x2F;psaux&quot;</span><br><span class="line">    Option         &quot;Emulate3Buttons&quot; &quot;no&quot;</span><br><span class="line">    Option         &quot;ZAxisMapping&quot; &quot;4 5&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputDevice&quot;</span><br><span class="line"></span><br><span class="line">    # generated from default</span><br><span class="line">    Identifier     &quot;Keyboard0&quot;</span><br><span class="line">    Driver         &quot;kbd&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Monitor&quot;</span><br><span class="line"></span><br><span class="line">    # HorizSync source: xconfig, VertRefresh source: xconfig</span><br><span class="line">    Identifier     &quot;Monitor0&quot;</span><br><span class="line">    VendorName     &quot;Unknown&quot;</span><br><span class="line">    ModelName      &quot;DELL U2414H&quot;</span><br><span class="line">    HorizSync       30.0 - 83.0</span><br><span class="line">    VertRefresh     56.0 - 76.0</span><br><span class="line">    Option         &quot;DPMS&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">    BoardName      &quot;GeForce GTX 960&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line"></span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    Option         &quot;Stereo&quot; &quot;0&quot;</span><br><span class="line">    Option         &quot;nvidiaXineramaInfoOrder&quot; &quot;DFP-2&quot;</span><br><span class="line">    Option         &quot;TwinView&quot;</span><br><span class="line">    Option         &quot;metamodes&quot; &quot;DP-0: nvidia-auto-select +900+0, DVI-I-0: 1440x900 +0+0 &#123;rotation&#x3D;right&#125;&quot;</span><br><span class="line">	Option		   &quot;TwinView Orientation&quot; &quot;RightOf&quot; </span><br><span class="line">    Option         &quot;SLI&quot; &quot;Off&quot;</span><br><span class="line">    Option         &quot;MultiGPU&quot; &quot;Off&quot;</span><br><span class="line">    Option         &quot;BaseMosaic&quot; &quot;off&quot;</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04将分区挂载到home并设置开机自动挂载分区</title>
    <url>/Ubuntu/Ubuntu%2018.04%E5%B0%86%E5%88%86%E5%8C%BA%E6%8C%82%E8%BD%BD%E5%88%B0home%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu 18.04 挂载分区的一些操作<br><span id="more"></span></p>
</blockquote>
<h3 id="临时挂载分区到-home（一般可以直接按第二种情况操作）"><a href="#临时挂载分区到-home（一般可以直接按第二种情况操作）" class="headerlink" title="临时挂载分区到/home（一般可以直接按第二种情况操作）"></a>临时挂载分区到/home（一般可以直接按第二种情况操作）</h3><p>参考链接：<a href="https://www.cnblogs.com/littleby/p/9843620.html">ubuntu 添加新分区，并挂载/home</a><br>情况说明：我重装Ubuntu时没格式化home分区，想直接挂载到新系统避免文件的丢失<br>查看分区信息：<code>sudo fdisk -l</code><br>创建临时目录，用来临时挂载新分区：<code>sudo mount /dev/sdb1 /mnt/newpart</code>其中sdb1为需要挂载的分区<br>将/home目录下的文件拷贝到新分区：<br><code>cd /home</code><br><code>sudo cp -ax * /mnt/newpart</code><br>然后将原有/home目录重命名，并将新分区挂载到空的/home目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">sudo mv /home /home.old</span><br><span class="line">sudo mkdir /home</span><br><span class="line">sudo mount /dev/sdb1 /home</span><br></pre></td></tr></table></figure><br>以上操作已经可以实现临时挂载。</p>
<h3 id="设置开机自动挂载分区"><a href="#设置开机自动挂载分区" class="headerlink" title="设置开机自动挂载分区"></a>设置开机自动挂载分区</h3><ul>
<li><strong>开机挂载分区到/home</strong><br><code>sudo blkid</code><br>找到需要挂载分区的uuid<br><code>sudo gedit /etc/fstab</code><br>  加入一行：<code>UUID=*******            /home       ext4    defaults          0             2</code><br>  含义分别为：uuid    挂载到的目录    文件系统格式    后面三个不记得了<br>最后查看权限：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">sudo chown user:user ./user <span class="comment">#user改为自己的用户名，第一个指用户，第二个指组，第三个为文件夹</span></span><br></pre></td></tr></table></figure></li>
<li><strong>挂载其他分区</strong><br>与上述挂载方式类似，例如挂载普通的Windows分区，只需要将目录改为/media/user/卷标，将文件系统改为ntfs即可</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
