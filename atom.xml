<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bright Hammer</title>
  
  <subtitle>Talk is cheap, Show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brighthammer.github.io/"/>
  <updated>2021-01-11T09:56:39.000Z</updated>
  <id>https://brighthammer.github.io/</id>
  
  <author>
    <name>Bright Hammer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 清理C盘 释放空间 方法汇总</title>
    <link href="https://brighthammer.github.io/2021/01/11/Windows%20%E6%B8%85%E7%90%86C%E7%9B%98%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%20%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://brighthammer.github.io/2021/01/11/Windows%20%E6%B8%85%E7%90%86C%E7%9B%98%20%E9%87%8A%E6%94%BE%E7%A9%BA%E9%97%B4%20%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2021-01-11T09:56:39.000Z</published>
    <updated>2021-01-11T09:56:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>汇总Windows清理C盘空间的各种方法</p><a id="more"></a></blockquote><ul><li><strong>参考链接：</strong><a href="https://zhuanlan.zhihu.com/p/301375135">C盘莫名其妙就满了？手把手教你深度清理C盘，长久释放C盘空间</a></li></ul><h2 id="查看空间占用情况"><a href="#查看空间占用情况" class="headerlink" title="查看空间占用情况"></a>查看空间占用情况</h2><div class="note info">            <p><strong>使用 SpaceSniffer 查看分区各文件的空间占用情况</strong></p>          </div><p>下载地址：<a href="http://www.uderzo.it/main_products/space_sniffer/">http://www.uderzo.it/main_products/space_sniffer/</a></p><p><img src="..\images\spacesniffer.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;汇总Windows清理C盘空间的各种方法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Windows" scheme="https://brighthammer.github.io/tags/Windows/"/>
    
      <category term="垃圾清理" scheme="https://brighthammer.github.io/tags/%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>office - 如何优雅地输入数学公式</title>
    <link href="https://brighthammer.github.io/2020/07/26/office-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>https://brighthammer.github.io/2020/07/26/office-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</id>
    <published>2020-07-26T06:32:39.000Z</published>
    <updated>2020-07-27T03:41:05.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>office输入公式的快捷语法详细介绍<br><a id="more"></a></p></blockquote><h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h1><p>最近用word写作业要输很多公式，网上学习了一些小技巧，感觉终于感受到了用word输公式的快乐，表示再也不怕word的公式不好看了，也不需要频繁切换鼠标键盘了，写个帖子稍微总结一下常用操作。</p><p>先放上一些主要的参考链接：</p><ul><li><strong>官方说明：<a href="[https://support.microsoft.com/zh-cn/office/word-%e4%b8%ad%e4%bd%bf%e7%94%a8-unicodemath-%e5%92%8c-latex-%e7%9a%84%e7%ba%bf%e6%80%a7%e6%a0%bc%e5%bc%8f%e5%85%ac%e5%bc%8f-2e00618d-b1fd-49d8-8cb4-8d17f25754f8?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn](https://support.microsoft.com/zh-cn/office/word-中使用-unicodemath-和-latex-的线性格式公式-2e00618d-b1fd-49d8-8cb4-8d17f25754f8?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn">Word 中使用 UnicodeMath 和 LaTeX 的线性格式公式</a>)</strong></li><li><strong>Jacob Zhong 非常全面的总结：<a href="https://zyxin.xyz/blog/2017-08/WordMath/" target="_blank" rel="noopener">Word - 快速输入数学公式</a></strong></li></ul><h1 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1.快捷键"></a>1.快捷键</h1><ul><li><strong><code>Alt</code></strong>+<strong> <code>=</code></strong><ul><li>插入新公式，或将当前选中的内容变换为公式</li></ul></li><li><strong><code>Ctrl</code></strong> + <strong><code>I</code></strong><ul><li>将公式设为斜体，可以在插入公式后立即设置，这样打出来的就直接是斜体了，减少了鼠标选中的操作</li></ul></li><li><strong><code>空格</code></strong><ul><li>输入快捷命令后最常用的格式转换键，即输入快捷命令后，按下空格，公式即会变成对应的格式</li></ul></li><li><strong><code>Enter</code></strong><ul><li>在部分场景下用于格式转换+回车</li></ul></li></ul><h1 id="2-常用符号快捷输入"><a href="#2-常用符号快捷输入" class="headerlink" title="2. 常用符号快捷输入"></a>2. 常用符号快捷输入</h1><p>主要是这一部分符号的输入：</p><p><img src="/images/WordFormulaSymbol.png" alt="img"></p><p><strong>关键方法：<code>\ + 快捷命令 + 空格</code></strong></p><p>命令解释：”\\”作为转义符，鼠标停留在符号上时会出现相应的快捷命令，比较好记，最后敲空格实现格式转换</p><p><img src="/images/WordFormulaSymbol-theta.png" alt="img"></p><p>一些栗子：</p><ul><li><code>\alpha</code> $\rightarrow$ $\alpha$</li><li><code>\beta</code> $\rightarrow$ $\beta$</li><li><code>\pi</code> $\rightarrow$ $\pi$</li><li><code>\varphi</code> $\rightarrow$ $\varphi$</li><li><code>...</code></li></ul><p>另外，有一些常用的数学符号，不需要转义符word也会自动合并</p><ul><li><code>/=</code> $\rightarrow$ $\neq$</li><li><code>+-</code> $\rightarrow$ $\pm$</li><li><code>&lt;=</code> $\rightarrow$ $\leq$</li><li><code>...</code></li></ul><p>大部分快捷命令和LaTeX，Markdown等都差不多，还是比较好记的。</p><h1 id="3-常用结构快捷输入"><a href="#3-常用结构快捷输入" class="headerlink" title="3. 常用结构快捷输入"></a>3. 常用结构快捷输入</h1><p>接下来一些常用的最费鼠标的各种结构（剩下一些用到的时候再来补充，更详细的可以参考帖子开头给的参考链接）：</p><p><img src="/images/WordFormulaStructures.png" alt="img"></p><h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><ul><li><code>a/b</code> $\rightarrow$ $\frac{a}{b}$</li><li><code>a\sdiv b</code> $\rightarrow$ $a/b$</li><li><code>\partial a/\partial b</code> $\rightarrow$ $\frac{\partial a}{\partial b}$</li><li><code>\Delta a/\Delta b</code> $\rightarrow$ $\frac{\Delta a}{\Delta b}$</li></ul><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><ul><li><code>a^b</code> $\rightarrow$ $a^b$</li><li><code>a_b</code> $\rightarrow$ $a_b$</li><li><code>a_b^c</code> $\rightarrow$ $a_b^c$</li><li><code>(_c^b)a</code> $\rightarrow$ $_c^ba$</li></ul><h2 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h2><ul><li><code>\sqrt a</code> $\rightarrow$ $\sqrt a$</li><li><code>\sqrt (b&amp;a)</code> $\rightarrow$ $\sqrt[b]{a}$</li><li><code>\cbrt a</code> $\rightarrow$ $\sqrt[3]{a}$</li></ul><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><ul><li><code>\int \of a</code> $\rightarrow$ $\int{a}$</li><li><code>\iint \of a</code> $\rightarrow$ $\iint{a}$</li><li><code>\int^b_c a</code> $\rightarrow$ $\int^b_c{a}$</li></ul><h2 id="大型运算符"><a href="#大型运算符" class="headerlink" title="大型运算符"></a>大型运算符</h2><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>输入对应的括号后点空格</p><ul><li><code>(a+b)</code> $\rightarrow$ $(a+b)$</li><li><code>{a\times [b\times (c+d)]}</code> $\rightarrow$ ${a\times[b\times(c+d)]}$</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><ul><li><code>a\dot</code> $\rightarrow$ $\dot{a}$</li><li><code>a\ddot</code> $\rightarrow$ $\ddot{a}$</li><li><code>a\hat</code> $\rightarrow$ $\hat{a}$</li><li><code>a\tilde</code> $\rightarrow$ $\tilde{a}$</li></ul><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><ul><li><code>\matrix (a&amp;b@c&amp;d)</code> $\rightarrow$ <script type="math/tex">\matrix{a&b \\ c&d}</script></li></ul><h1 id="4-自动编号"><a href="#4-自动编号" class="headerlink" title="4. 自动编号"></a>4. 自动编号</h1><p>以前公式自动编号我都是用一个表格，左边放公式，右边放编号，整体效果还行但还是不够完美，后来发现其实Word的公式有带编号的格式。</p><p><strong>关键方法：在公式右边输入<code>#()</code>后按回车（这里必须回车，空格不行），随后在格式化后的括号中插入自动编号即可。</strong></p><p>编号格式化之后的效果如下图：</p><p><img src="/images/WordFormulaAutoNumbering.png" alt="img"></p><p>然后在括号中<strong>插入-文档部件-域-编号-AutoNum-1,2,3</strong>即可，其他公式直接复制这个编号过去，文档中的公式即实现了自动编号。</p><p><img src="/images/WordFormulaAutoNumbering-InsertNum.png" alt="img"></p><blockquote><p>为了写这篇帖子还把Markdown的公式过了一遍，，，感觉一些较为简单的公式还是Word稍微方便一些😁</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;office输入公式的快捷语法详细介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="c++ coding" scheme="https://brighthammer.github.io/categories/c-coding/"/>
    
    
      <category term="office" scheme="https://brighthammer.github.io/tags/office/"/>
    
      <category term="word" scheme="https://brighthammer.github.io/tags/word/"/>
    
      <category term="公式" scheme="https://brighthammer.github.io/tags/%E5%85%AC%E5%BC%8F/"/>
    
      <category term="排版" scheme="https://brighthammer.github.io/tags/%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://brighthammer.github.io/2020/05/11/hello-world/"/>
    <id>https://brighthammer.github.io/2020/05/11/hello-world/</id>
    <published>2020-05-11T08:02:10.041Z</published>
    <updated>2020-05-11T08:02:10.041Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Example" scheme="https://brighthammer.github.io/tags/Example/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu终端常用命令</title>
    <link href="https://brighthammer.github.io/2020/02/26/Ubuntu%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://brighthammer.github.io/2020/02/26/Ubuntu%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-26T03:33:49.000Z</published>
    <updated>2020-02-26T03:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经常忘记的Ubuntu终端命令，mark一下<br><a id="more"></a></p></blockquote><h1 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h1><ul><li><p>超级权限文件夹<br><code>sudo nautilus</code></p></li><li><p>创建新文件<br><code>touch newfile.txt</code></p></li><li><p>创建文件夹<br><code>mkdir newdir</code></p></li><li><p>创建文件夹快捷方式<br><code>ln -s /home/panda/Programs/ ~/桌面/Programs</code></p></li><li><p>压缩解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅打包，并非压缩</span></span><br><span class="line">tar -xvf FileName.tar         <span class="comment"># 解包</span></span><br><span class="line">tar -cvf FileName.tar DirName <span class="comment"># 将DirName和其下所有文件（夹）打包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gz</span></span><br><span class="line">gunzip FileName.gz  <span class="comment"># 解压1</span></span><br><span class="line">gzip -d FileName.gz <span class="comment"># 解压2</span></span><br><span class="line">gzip FileName       <span class="comment"># 压缩，只能压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.gz 和 .tgz</span></span><br><span class="line">tar -zxvf FileName.tar.gz               <span class="comment"># 解压</span></span><br><span class="line">tar -zcvf FileName.tar.gz DirName       <span class="comment"># 将DirName和其下所有文件（夹）压缩</span></span><br><span class="line">tar -C DesDirName -zxvf FileName.tar.gz <span class="comment"># 解压到目标路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 感觉.zip占用空间比.tar.gz大</span></span><br><span class="line">unzip FileName.zip          <span class="comment"># 解压</span></span><br><span class="line">zip FileName.zip DirName    <span class="comment"># 将DirName本身压缩</span></span><br><span class="line">zip -r FileName.zip DirName <span class="comment"># 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mac和linux并没有自带rar，需要去下载</span></span><br><span class="line">rar x FileName.rar      <span class="comment"># 解压</span></span><br><span class="line">rar a FileName.rar DirName <span class="comment"># 压缩</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="环境-软件相关"><a href="#环境-软件相关" class="headerlink" title="环境/软件相关"></a>环境/软件相关</h1><ul><li>查看opencv版本<br><code>pkg-config --modversion opencv</code><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1></li><li>刷新dns的缓存：<br><code>sudo /etc/init.d/nscd restart</code><br>如果发现提示命令找不到：sudo: /etc/init.d/nscd: command not found<br>需要先安装nscd包：<br><code>sudo apt-get install nscd</code></li><li>重启网络：<br><code>sudo /etc/init.d/networking restart</code></li><li>修改grub参数并更新grub<br><code>sudo vim /etc/default/grub</code><br><code>sudo update-grub</code></li></ul><div class="note default">            <p>Ubunt&amp; Vim 常用命令汇总壁纸 </p>          </div><p><img src="/images/UbuntuCommand.jpg" alt=""></p><p><img src="https://wx1.sinaimg.cn/large/ee0f01e3gy1gc9ntrr42ij21ci0u07wh.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;经常忘记的Ubuntu终端命令，mark一下&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://brighthammer.github.io/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://brighthammer.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>文章样式测试帖</title>
    <link href="https://brighthammer.github.io/2020/02/07/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B8%96/"/>
    <id>https://brighthammer.github.io/2020/02/07/%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%E5%B8%96/</id>
    <published>2020-02-07T09:21:39.000Z</published>
    <updated>2020-05-11T08:02:10.047Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章样式测试帖<br><a id="more"></a></p></blockquote><p><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;note default&quot;&gt;&lt;p&gt;default&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% note default %&#125; default &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <p>default </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary %&#125; primary &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note primary">            <p>primary </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125; success &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note success">            <p>success </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info %&#125; info &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info">            <p>info </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125; warning &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note warning">            <p>warning </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger %&#125; dager &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger">            <p>dager </p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger no-icon %&#125; danger no-icon &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon">            <p>danger no-icon </p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章样式测试帖&lt;br&gt;
    
    </summary>
    
    
      <category term="test" scheme="https://brighthammer.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://brighthammer.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>C++常用功能汇总-文件读写 计时 随机数</title>
    <link href="https://brighthammer.github.io/2020/02/02/C-%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99-%E8%AE%A1%E6%97%B6-%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://brighthammer.github.io/2020/02/02/C-%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99-%E8%AE%A1%E6%97%B6-%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2020-02-02T12:14:39.000Z</published>
    <updated>2020-05-11T08:02:10.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C++常用功能：文件读写 计时 随机数 等的用法<br><a id="more"></a></p></blockquote><h1 id="1、字符串string类"><a href="#1、字符串string类" class="headerlink" title="1、字符串string类"></a>1、字符串string类</h1><ul><li><strong>参考链接：</strong><a href="https://www.cnblogs.com/lifexy/p/8642163.html" target="_blank" rel="noopener">C++-string字符串类(详解)</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>常用构造函数：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str;        <span class="comment">//生成一个空字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span> <span class="params">(<span class="string">"ABC"</span>)</span>  <span class="comment">//等价于 str="ABC"&lt;br&gt;</span></span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span> <span class="params">(<span class="string">"ABC"</span>, <span class="built_in">strlen</span>)</span>  <span class="comment">// 将"ABC"存到str里,最多存储前strlen个字节</span></span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"ABC"</span>,stridx,<span class="built_in">strlen</span>)</span>   <span class="comment">//将"ABC"的stridx位置,做为字符串开头,存到str里.且最多存储strlen个字节.</span></span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="built_in">strlen</span>, <span class="string">'A'</span>)</span>  <span class="comment">//存储strlen个'A'到str里</span></span></span><br></pre></td></tr></table></figure><ul><li>常用成员函数：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1.assign(<span class="string">"ABC"</span>);　　　　　　　　<span class="comment">//清空string串,然后设置string串为"ABC"</span></span><br><span class="line">str1.length()；                 <span class="comment">//获取字符串长度</span></span><br><span class="line">str1.size();　　　　　　　　　　　 <span class="comment">//获取字符串数量,等价于length()</span></span><br><span class="line">str1.capacity();　　　　　　　　  <span class="comment">//获取容量,容量包含了当前string里不必增加内存就能使用的字符数</span></span><br><span class="line">str1.resize(<span class="number">10</span>);　　　　　　     <span class="comment">//表示设置当前string里的串大小,若设置大小大于当前串长度,则用字符\0来填充多余的.</span></span><br><span class="line">str1.resize(<span class="number">10</span>,<span class="keyword">char</span> c);　　　　 <span class="comment">//设置串大小，若设置大小大于当前串长度,则用字符c来填充多余的</span></span><br><span class="line">str1.reserve(<span class="number">10</span>);　　　　　　　　　<span class="comment">//设置string里的串容量,不会填充数据.</span></span><br><span class="line">str1.swap(str2);        　　    <span class="comment">//替换str1 和 str2 的字符串</span></span><br><span class="line">str1.puch_back (<span class="string">'A'</span>);    　　<span class="comment">//在str1末尾添加一个'A'字符,参数必须是字符形式</span></span><br><span class="line">str1.append (<span class="string">"ABC"</span>);     　　<span class="comment">//在str1末尾添加一个"ABC"字符串,参数必须是字符串形式</span></span><br><span class="line">str1.insert (<span class="number">2</span>,<span class="string">"ABC"</span>);       <span class="comment">//在str1的下标为2的位置,插入"ABC"</span></span><br><span class="line">str1.erase(<span class="number">2</span>);         　　　　<span class="comment">//删除下标为2的位置,比如: "ABCD" --&gt; "AB"</span></span><br><span class="line">str1.erase(<span class="number">2</span>,<span class="number">1</span>);              <span class="comment">//从下标为2的位置删除1个,比如: "ABCD"  --&gt; "ABD"</span></span><br><span class="line">str1.clear();           　　 <span class="comment">//删除所有</span></span><br><span class="line">str1.replace(<span class="number">2</span>,<span class="number">4</span>, <span class="string">"ABCD"</span>); <span class="comment">//从下标为2的位置,替换4个字节,为"ABCD"</span></span><br><span class="line">str1.empty();         　　 <span class="comment">//判断为空, 为空返回true</span></span><br></pre></td></tr></table></figure><ul><li>与char*相互转换：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str.c_str();        <span class="comment">//string转为char*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *st = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> st1 = st;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">st2</span><span class="params">(st, st + <span class="built_in">strlen</span>(st))</span></span>;</span><br></pre></td></tr></table></figure><ul><li>与数字的转换：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;&gt;</span></span></span><br><span class="line"><span class="comment">//-----------string转为数字：</span></span><br><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span> <span class="params">(<span class="string">"123.5"</span>)</span></span>;    <span class="comment">//定义对象iss,初始化为"123.5" , </span></span><br><span class="line"><span class="comment">//等价于:</span></span><br><span class="line"><span class="comment">//istringstream iss;</span></span><br><span class="line"><span class="comment">//iss.str("123.5");                 //设置对象iss为"123.5" ,</span></span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"> <span class="keyword">if</span>(iss&gt;&gt;num)                 <span class="comment">//通过调用iss.operator &gt;&gt;(num), 将"123.5"转为数字,并返回bool类型变量</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//也可以通过临时对象转换：</span></span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"123.5"</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">istringstream</span>(str)&gt;&gt;num)        <span class="comment">//通过临时对象,来将str转为数字</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//或者将第3行,写为宏:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_NUM(str,num)     (istringstream(str)&gt;&gt;num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------数字转为string</span></span><br><span class="line"><span class="built_in">ostringstream</span> oss;</span><br><span class="line">oss &lt;&lt;<span class="number">123.5</span>;                   <span class="comment">//相当于调用: oss.str("123.5");</span></span><br><span class="line"><span class="built_in">string</span> str= oss.str() ;</span><br><span class="line"><span class="comment">//也可以通过宏,这样写:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(num)     ( ((ostringstream&amp;)(ostringstream()&lt;&lt;num)).str() )</span></span><br><span class="line"><span class="keyword">double</span> num=<span class="number">123.5</span>;</span><br><span class="line"><span class="built_in">string</span> str= TO_STRING(<span class="number">123.5</span>);</span><br></pre></td></tr></table></figure><h1 id="2、文件读写"><a href="#2、文件读写" class="headerlink" title="2、文件读写"></a>2、文件读写</h1><ul><li><strong>参考链接：</strong><br><a href="https://blog.csdn.net/u011574296/article/details/72956446" target="_blank" rel="noopener">Windows下对文件夹下所有图片批量重命名</a><br><a href="https://blog.csdn.net/guyuealian/article/details/77981953" target="_blank" rel="noopener">C++读取文件夹中所有文件的路径，包含子文件夹</a></li></ul><h2 id="文本文件读取与写入"><a href="#文本文件读取与写入" class="headerlink" title="文本文件读取与写入"></a>文本文件读取与写入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">fstream inFile, outFile;</span><br><span class="line"><span class="keyword">if</span>( (_access( <span class="string">"in.txt"</span>, <span class="number">0</span> )) != <span class="number">-1</span> )  </span><br><span class="line">&#123;  </span><br><span class="line">printf_s( <span class="string">"File crt_ACCESS.C exists.\n"</span> );</span><br><span class="line">inFile.open(<span class="string">"in.txt"</span>, ios::in | ios::binary);<span class="comment">//二进制读取</span></span><br><span class="line">&#125;</span><br><span class="line">outFile.open(<span class="string">"out.txt"</span>, ios::out | ios::binary);<span class="comment">//二进制写入</span></span><br><span class="line">inFile &gt;&gt; count;</span><br><span class="line">outFile &lt;&lt; count;</span><br><span class="line">inFile.close();</span><br><span class="line">outFile.close();</span><br></pre></td></tr></table></figure><h2 id="文件夹相关操作"><a href="#文件夹相关操作" class="headerlink" title="文件夹相关操作"></a>文件夹相关操作</h2><ul><li>判断文件夹是否存在</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;  //Win</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;pre name=<span class="string">"code"</span> class=<span class="string">"cpp"</span>&gt;<span class="keyword">int</span> access(<span class="keyword">const</span> <span class="keyword">char</span>* _Filename, <span class="keyword">int</span> _AccessMode)</span><br><span class="line">_AccessMode:&#123;</span><br><span class="line">#define R_OK <span class="number">4</span> <span class="comment">/* Test for read permission. 读权限*/</span></span><br><span class="line">#define W_OK <span class="number">2</span> <span class="comment">/* Test for write permission. 写权限*/</span></span><br><span class="line">#define X_OK <span class="number">1</span> <span class="comment">/* Test for execute permission. 是否可执行*/</span></span><br><span class="line">#define F_OK <span class="number">0</span> <span class="comment">/* Test for existence. 是否存在*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建、删除文件夹</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *_Path)</span></span></span><br></pre></td></tr></table></figure><p>函数返回0表示成功，返回-1表示失败或不存在</p><h1 id="3、计时函数"><a href="#3、计时函数" class="headerlink" title="3、计时函数"></a>3、计时函数</h1><ul><li>参考链接：<a href="https://www.cnblogs.com/dwdxdy/p/3214905.html" target="_blank" rel="noopener">【C/C++】计时函数比较</a></li></ul><h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><blockquote><p>time()获取当前的系统时间，返回的结果是一个time_t类型，其实就是一个==大整数==，其值表示从CUT（Coordinated Universal Time）时间1970年1月1日00:00:00（称为UNIX系统的Epoch时间）到当前时刻的秒数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> start,stop;</span><br><span class="line">    start = time(<span class="literal">NULL</span>);</span><br><span class="line">    foo();<span class="comment">//dosomething</span></span><br><span class="line">    stop = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Use Time:%ld\n"</span>,(stop-start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><blockquote><p>clock()函数返回从“开启这个程序进程”到“程序中调用clock()函数”时之间的CPU时钟计时单元（clock tick）数，在MSDN中称之为挂钟时间（wal-clock）<br>常量CLOCKS_PER_SEC，它用来表示一秒钟会有多少个时钟计时单元。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dur;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    start = clock();</span><br><span class="line">    foo();<span class="comment">//dosomething</span></span><br><span class="line">    end = clock();</span><br><span class="line">    dur = (<span class="keyword">double</span>)(end - start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Use Time:%f\n"</span>,(dur/CLOCKS_PER_SEC));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="timeGetTime"><a href="#timeGetTime" class="headerlink" title="timeGetTime()"></a>timeGetTime()</h2><blockquote><p>timeGetTime()函数以毫秒计的系统时间。该时间为从系统开启算起所经过的时间,是windows api。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD t1,t2;</span><br><span class="line">    t1 = timeGetTime();</span><br><span class="line">    foo();<span class="comment">//dosomething</span></span><br><span class="line">    t2 = timeGetTime();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Use Time:%f\n"</span>,(t2-t1)*<span class="number">1.0</span>/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、随机数"><a href="#4、随机数" class="headerlink" title="4、随机数"></a>4、随机数</h1><ul><li><strong>参考链接：</strong><a href="http://notes.maxwi.com/2016/04/10/cpp-random/" target="_blank" rel="noopener">C++随机数类random的使用</a></li></ul><h2 id="cstdlib中伪随机数"><a href="#cstdlib中伪随机数" class="headerlink" title="cstdlib中伪随机数"></a>cstdlib中伪随机数</h2><p>C语言中通过函数rand和srand来产生伪随机数，这两个函数包含在头文件cstdlib中，其中srand用来产生设置随机数种子，rand每次返回一个当前的种子对应的随机数，这两个函数的声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> seed)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这两个函数的原型形如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* rand: return pseudo-random integer on 0..32767 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* srand: set seed for rand() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然rand只能生成整数，需要小数时，只需要跟一个浮点数进行除法即可<br><div class="note info">            <p><strong>一个生成[1, 15]的随机数例子：</strong></p>          </div></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//random num range is min to max, template function</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">cRandom</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (min + <span class="keyword">static_cast</span>&lt;T&gt;(max * rand() / <span class="keyword">static_cast</span>&lt;T&gt;(RAND_MAX + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">//生成10个整数</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"int: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cRandom&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//生成10个小数</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"double: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cRandom&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">15</span>) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成指定范围的随机数表达式：</p><blockquote><ul><li>要取得[a,b)的随机整数，使用(rand() % (b-a))+ a;</li><li>要取得[a,b]的随机整数，使用(rand() % (b-a+1))+ a;</li><li>要取得(a,b]的随机整数，使用(rand() % (b-a))+ a + 1;</li></ul></blockquote><p>通用公式:a + rand() % n；其中的a是起始值，n是整数的范围。</p><blockquote><ul><li>要取得a到b之间的随机整数，另一种表示：a + (int)b * rand() / (RAND_MAX + 1)。</li><li>要取得0～1之间的浮点数，可以使用rand() / double(RAND_MAX)。</li></ul></blockquote><h2 id="（2）C-11中的random类"><a href="#（2）C-11中的random类" class="headerlink" title="（2）C++11中的random类"></a>（2）C++11中的random类</h2><p>random类是C++11中增加的类，该类可以用于生成随机数，具有C语言中rand生成伪随机数的功能，但其功能更强大。原生支持生成浮点数，及分布类。</p><p>随机数发生器主要由分布对象和随机数引擎对象组成。其中随机数引擎用于根据随机数种子来产生随机数，分布对象对产生的随机数根据需求进行分布。<br>random中定义了多种随机数引擎及分布类型，常用的引擎是默认伪随机数引擎类default_random_engine，常用的分布类有产生整型分布的uniform_int_distribution，产生浮点型的分布uniform_real_distribution。</p><div class="note info">            <p><strong>输出15个double类型的随机数的例子：</strong></p>          </div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数接受三个参数分别指定随机数范围和种子，返回double</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">random_unint</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> min, <span class="keyword">unsigned</span> <span class="keyword">int</span> max, <span class="keyword">unsigned</span> <span class="keyword">int</span> seed = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::default_random_engine <span class="title">e</span><span class="params">(seed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">u</span><span class="params">(min, max)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> u(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; random_unint(<span class="number">0</span>, <span class="number">15</span>, time(<span class="literal">NULL</span>)) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning">            <p>一个给定的随机数发生器一直会生成相同的随机数序列。一个函数如果定义了局部的随机数发生器，应该将其（包括引擎和分布对象）定义为static的，否则每次调用函数都会生成相同的序列。也就是说定义成static后每次调用还是之前那个发生器，第一次调用产生一批随机数，再次调用将产生接下来的随机数，否则每次调用产生的都是最前面的那些随机数。</p>          </div><div class="note warning">            <p>依然需要使用time来做为种子产生每个不同时刻都不同的随机序列，但由于time默认返回的是以秒计的时间，所以有可能多次使用的都是相同的种子。</p>          </div><p><strong>伪随机数引擎</strong></p><ol><li>随机数引擎支持的操作如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Engine e; <span class="comment">//默认构造函数，使用该引擎类型的默认种子</span></span><br><span class="line"><span class="function">Engine <span class="title">e</span><span class="params">(s)</span></span>; <span class="comment">//使用整型s做为种子</span></span><br><span class="line">e.seed(s); <span class="comment">//使用整型s重置引擎状态</span></span><br><span class="line">e.min(); <span class="comment">//返回此引擎所能生成的最小和最大值</span></span><br><span class="line">e.max();</span><br><span class="line">Engine::result_type <span class="comment">//此引擎生成的类型（unsigned）</span></span><br><span class="line">e.discard(u); <span class="comment">//将引擎推进u步，u为unsigned long long类型</span></span><br></pre></td></tr></table></figure><ol><li>随机数引擎使用</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::default_random_engine e;   <span class="comment">//生成随机的无符号数</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e();       <span class="comment">//通过()调用对象生成下一个随机数并输出</span></span><br></pre></td></tr></table></figure><p><strong>分布</strong></p><ol><li>分布类型有很多种，常用的有返回整型的uniform_int_distribution和返回浮点型的uniform_real_distribution</li><li>分布支持的操作</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dist d; <span class="comment">//默认构造函数</span></span><br><span class="line"><span class="function">Dist <span class="title">d</span><span class="params">(min, max)</span></span>; <span class="comment">//为d指定范围</span></span><br><span class="line">d(e) <span class="comment">//e是一个随机数引擎对象</span></span><br><span class="line">d.min() <span class="comment">//返回d(e)所能生成的最小值和最大值</span></span><br><span class="line">d.max()</span><br><span class="line">d.reset(); <span class="comment">//重置d的状态，使得随后对d的使用不依赖于d已经生成的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;C++常用功能：文件读写 计时 随机数 等的用法&lt;br&gt;
    
    </summary>
    
    
      <category term="c++ coding" scheme="https://brighthammer.github.io/categories/c-coding/"/>
    
    
      <category term="c++" scheme="https://brighthammer.github.io/tags/c/"/>
    
      <category term="文件读写" scheme="https://brighthammer.github.io/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
      <category term="计时" scheme="https://brighthammer.github.io/tags/%E8%AE%A1%E6%97%B6/"/>
    
      <category term="随机数" scheme="https://brighthammer.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
</feed>
